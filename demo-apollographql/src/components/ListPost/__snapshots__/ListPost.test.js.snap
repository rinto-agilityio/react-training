// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Components <ListPost /> Render correctly ListPost component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MemoryRouter
    keyLength={0}
  >
    <ListPost
      posts={
        Array [
          Object {
            "authorId": 3,
            "content": "In order for a unit test to be worthwhile it must be reliable; it should not be reliant on hopeful consistency of external dependencies in order to pass. External dependencies can include any modules/packages external to the test subject, requests to a database, or requests to an API. If running the same test several times without change can result in different outcomes, the test loses value. If trust in the test is lost, less focus is inevitably paid to test failures.",
            "fullContent": "<p name=\\"444d\\" id=\\"444d\\" class=\\"graf graf--p graf-after--figure\\"><a href=\\"https://medium.com/codeclan/testing-react-with-jest-and-enzyme-20505fec4675\\" data-href=\\"https://medium.com/codeclan/testing-react-with-jest-and-enzyme-20505fec4675\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\"><em class=\\"markup--em markup--p-em\\">Previously</em></a><em class=\\"markup--em markup--p-em\\"> we introduced the basics of using </em><a href=\\"https://jestjs.io/docs/en/getting-started\\" data-href=\\"https://jestjs.io/docs/en/getting-started\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener nofollow\\" target=\\"_blank\\"><em class=\\"markup--em markup--p-em\\">Jest</em></a><em class=\\"markup--em markup--p-em\\"> as a test runner, assertion library, and mocking library. If you have not used Jest before I recommend reading through the linked post first.</em></p><p name=\\"066f\\" id=\\"066f\\" class=\\"graf graf--p graf-after--p\\">In order for a unit test to be worthwhile it must be reliable; it should not be reliant on hopeful consistency of external dependencies in order to pass. External dependencies can include any <a href=\\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\\" data-href=\\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">modules/packages</a> external to the test subject, requests to a database, or requests to an API. If running the same test several times without change can result in different outcomes, the test loses value. If trust in the test is lost, less focus is inevitably paid to test failures.</p><p name=\\"2e8f\\" id=\\"2e8f\\" class=\\"graf graf--p graf-after--p\\">Unit tests aim to test small units of code in isolation, testing how each behaves with specific input. The responsibility of testing how different parts of a system work together lies with integration tests.</p>",
            "id": 1,
            "slug": "mocking-es-and-commonjs-modules-with-jest-mock",
            "title": "Mocking ES and CommonJS modules with jest.mock()",
          },
          Object {
            "authorId": 2,
            "content": "We know that components and top-down data flow help us organize a large UI into small, independent, reusable pieces. However, we often can’t break complex components down any further because the logic is stateful and can’t be extracted to a function or another component. Sometimes that’s what people mean when they say React doesn’t let them “separate concerns.”",
            "fullContent": "<p name=\\"7b7c\\" id=\\"7b7c\\" class=\\"graf graf--p graf-after--figure\\">I strongly recommend to watch this opening keynote to see the problems we’re trying to solve with the Hooks proposal. However, even an hour is a big time investment, so I decided to share a few thoughts on Hooks below.</p><h3 name=\\"5655\\" id=\\"5655\\" class=\\"graf graf--h3 graf-after--blockquote\\">Why Hooks?</h3><p name=\\"28ba\\" id=\\"28ba\\" class=\\"graf graf--p graf-after--h3\\">We know that components and top-down data flow help us organize a large UI into small, independent, reusable pieces. <strong class=\\"markup--strong markup--p-strong\\">However, we often can’t break complex components down any further because the logic is stateful and can’t be extracted to a function or another component.</strong> Sometimes that’s what people mean when they say React doesn’t let them “separate concerns.”</p><p name=\\"036d\\" id=\\"036d\\" class=\\"graf graf--p graf-after--p\\">These cases are very common and include animations, form handling, connecting to external data sources, and many other things we want to do from our components. When we try to solve these use cases with components alone, we usually end up with:</p>",
            "id": 2,
            "slug": "making-sense-of-react-hooks",
            "title": "Making Sense of React Hooks",
          },
          Object {
            "authorId": 1,
            "content": "Learning and mastering a new skill can be tough, but with enough persistence and motivation there is a lot we can achieve. Like learning how to code, it can be hard, frustrating and time-consuming. In the end, the most important thing to do is to keep going and gain experience.",
            "fullContent": "<p name=\\"b923\\" id=\\"b923\\" class=\\"graf graf--p graf-after--p\\">Side projects come in many forms and have lots of different purposes. Some people start them to create a nice product and eventually build a successful company, but there are many other reasons why working on side projects can be exceptionally important.</p><h3 name=\\"6bfc\\" id=\\"6bfc\\" class=\\"graf graf--h3 graf-after--p\\">Accelerate your learning.</h3><p name=\\"c1e6\\" id=\\"c1e6\\" class=\\"graf graf--p graf-after--h3\\">Learning and mastering a new skill can be tough, but with enough persistence and motivation there is a lot we can achieve. Like learning how to code, it can be hard, frustrating and time-consuming. <span class=\\"markup--quote markup--p-quote is-other\\" name=\\"anon_3afddf1c3fc5\\" data-creator-ids=\\"anon\\">In the end, the most important thing to do is to keep going and gain experience.</span></p><p name=\\"f873\\" id=\\"f873\\" class=\\"graf graf--p graf-after--p\\">Sure, it helps if you’re good at math, logical thinking and have a college degree in computer science. But for people with a non-technical background, like me, it’s still possible to become great developers with enough motivation and persistence.</p><p name=\\"4659\\" id=\\"4659\\" class=\\"graf graf--p graf-after--p\\">In my own experience, I found working on side projects in my spare time not only fun, but really helpful in developing my coding skills.</p>",
            "id": 3,
            "slug": "why-side-projects-are-so-damn-important",
            "title": "Why side projects are so damn important",
          },
          Object {
            "authorId": 3,
            "content": "CSS Grid (Grid) has been out for some time now, with full support in major modern browsers. I’ll leave others to dive into why it’s so great and what new design possibilities it makes so easy to explore. If you have been looking for the best way to support responsive web designs, I’ve yet to see anyone that doesn’t love Grid. It’s simple to use, yet extremely powerful and flexible.",
            "fullContent": "<p name=\\"da5e\\" id=\\"da5e\\" class=\\"graf graf--p graf-after--h3\\">I’ve experimented a lot with grid without thinking about progressive enhancement. I was making Codepen’s for no other purpose other than learning the spec. Almost all of them break into an embarrassing mess in non-supportive browsers.</p><p name=\\"8632\\" id=\\"8632\\" class=\\"graf graf--p graf-after--figure\\">Grid looks set to be unleashed on all browsers at the beginning of next year. As the prospect of building an actual commercial site for a client approaches, I’ve started to think about how to deal with older browsers. I started reading Aaron Gustafson’s book <em class=\\"markup--em markup--p-em\\">Adaptive Web Design: Crafting Rich Experiences with Progressive Enhancement</em>. While not mentioning CSS grid, it certainly re-emphasized the importance of the concept in my mind.</p><pre name=\\"541f\\" id=\\"541f\\" class=\\"graf graf--pre graf-after--p\\"><a href=\\"http://twitter.com/supports\\" data-href=\\"http://twitter.com/supports\\" class=\\"markup--anchor markup--pre-anchor\\" title=\\"Twitter profile for @supports\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">@supports</a> not(display: grid) {<br> .item {<br> height: 100px;<br> width: 100px;<br> margin: 20px;<br> }<br> .grid {<br> display: flex;<br> flex-wrap: wrap;<br> }<br>}</pre><p name=\\"7b9a\\" id=\\"7b9a\\" class=\\"graf graf--p graf-after--pre\\">What if you want to support browsers that don’t even support @supports? Simply use the cascading nature of CSS. If it’s old enough to have not implemented @supports it is unlikely to support flexbox, but we could give a basic float layout at the top of our stylesheet, and then overwrite it further down with</p><pre name=\\"e81d\\" id=\\"e81d\\" class=\\"graf graf--pre graf-after--p\\"><a href=\\"http://twitter.com/supports\\" data-href=\\"http://twitter.com/supports\\" class=\\"markup--anchor markup--pre-anchor\\" title=\\"Twitter profile for @supports\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">@supports</a> (display: grid) { <br>styles to overwrite float layout <br>}</pre>",
            "id": 4,
            "slug": "progressive-enhancement-with-css-grid",
            "title": "Progressive enhancement with CSS Grid",
          },
          Object {
            "authorId": 2,
            "content": "Many people get confused by the difference between components, their instances, and elements in React. Why are there three different terms to refer to something that is painted on screen?
If you’re new to React, you probably only worked with component classes and instances before. For example, you may declare a Button component by creating a class. When the program is running, you may have several instances of this component on screen, each with its own properties and local state. This is the traditional object oriented UI programming. Why introduce elements?",
            "fullContent": "<p name=\\"e47d\\" id=\\"e47d\\" class=\\"graf graf--p graf-after--h3\\">Many people get confused by <strong class=\\"markup--strong markup--p-strong\\">the difference between components, their instances, and elements in React</strong>. Why are there three different terms to refer to something that is painted on screen?</p><p name=\\"468b\\" id=\\"468b\\" class=\\"graf graf--p graf-after--p\\">If you’re new to React, you probably only worked with component classes and instances before. For example, you may declare a Button<em class=\\"markup--em markup--p-em\\"> component </em>by creating a class. When the program is running, you may have several <em class=\\"markup--em markup--p-em\\">instances </em>of this component on screen, each with its own properties and local state. This is the traditional object oriented UI programming. Why introduce <em class=\\"markup--em markup--p-em\\">elements</em>?</p><p name=\\"45f7\\" id=\\"45f7\\" class=\\"graf graf--p graf-after--p\\">In this traditional UI model, it is up to you take care of creating and destroying child component instances. If a <em class=\\"markup--em markup--p-em\\">Form</em> component wants to render a <em class=\\"markup--em markup--p-em\\">Button</em> component, it needs to create its instance, and manually keep it up to date with any new information.</p><p name=\\"c367\\" id=\\"c367\\" class=\\"graf graf--p graf-after--pre\\">This is pseudocode, but this is more or less what you end up with when you try to write composable UI that behaves consistently in an object oriented way with a framework like Backbone.</p><p name=\\"de5a\\" id=\\"de5a\\" class=\\"graf graf--p graf-after--p\\">Each component has to keep references to its DOM node and to the instances of the children components, and create, update, and destroy them when the time is right. The lines of code grow as the square of the number of possible states of the component, and the parents have direct access to their children component instances, making it hard to decouple them in the future.</p>",
            "id": 5,
            "slug": "react-components-elements-and-instances",
            "title": "React Components, Elements, and Instances",
          },
          Object {
            "authorId": 2,
            "content": "There has been no shortage of great Flux implementations, such as Flummox, Alt, or Fluxible. Most of them are focused on making Flux easier to use with the server rendering and reducing the boilerplate. They also often provide convenience utilities like higher-order components and asynchronous action helpers. Still, under the hood, many of them are built on top of the original Flux Dispatcher.",
            "fullContent": "<p name=\\"f9ff\\" id=\\"f9ff\\" class=\\"graf graf--p graf-after--figure\\">There has been no shortage of great Flux implementations, such as <a href=\\"https://github.com/acdlite/flummox\\" data-href=\\"https://github.com/acdlite/flummox\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flummox</a>, <a href=\\"https://github.com/goatslacker/alt\\" data-href=\\"https://github.com/goatslacker/alt\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Alt</a>, or <a href=\\"http://fluxible.io/\\" data-href=\\"http://fluxible.io/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Fluxible</a>. Most of them are focused on making Flux easier to use with the server rendering and reducing the boilerplate. They also often provide convenience utilities like <a href=\\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\\" data-href=\\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\">higher-order components</a> and asynchronous action helpers. Still, under the hood, many of them are built on top of the original <a href=\\"https://facebook.github.io/flux/docs/dispatcher.html\\" data-href=\\"https://facebook.github.io/flux/docs/dispatcher.html\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flux Dispatcher</a>.</p><p name=\\"25d1\\" id=\\"25d1\\" class=\\"graf graf--p graf-after--p\\">Say, if the actions aren’t plain objects flowing through a central dispatcher, it is much harder to <a href=\\"https://medium.com/@nextminds/replaying-bugs-with-flux-52f6bd8c8307\\" data-href=\\"https://medium.com/@nextminds/replaying-bugs-with-flux-52f6bd8c8307\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\">record and replay actions</a> for debugging. If the action type constants are not explicitly specified, and instead are generated from the method names, they might be more difficult to use together with the static analysis tools like <a href=\\"http://flowtype.org/\\" data-href=\\"http://flowtype.org/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flow</a>. That there is no single Flux library is a good thing, as the acceptable tradeoffs may vary for every team.</p><p name=\\"fb25\\" id=\\"fb25\\" class=\\"graf graf--p graf-after--p\\">Sure, figuring out how to make the isomorphic Flux easy was a step forward, but after that, the changes I have seen were either too cosmetic, or too drastic to call it Flux. <strong class=\\"markup--strong markup--p-strong\\">The unidirectional data flow is important, but so is the relative ease of use of Flux, even for people who are not very keen on the functional programming yet.</strong> I think that if something requires you to understand cursors or observables, it might be great, but it’s not Flux. (I <em class=\\"markup--em markup--p-em\\">do</em> like observables. But that’s not my point.)</p><p name=\\"8953\\" id=\\"8953\\" class=\\"graf graf--p graf-after--p\\">So is Flux evolving? For the first time in many months, I think that the answer is <em class=\\"markup--em markup--p-em\\">yes</em>. There are two API changes that I have noticed consistently in many new Flux implementations. These changes complement each other, and while they seem cosmetic, they also open up some exciting possibilities that weren’t available before. And they don’t even introduce any new concepts, such as cursors or observables!</p>",
            "id": 6,
            "slug": "the-evolution-of-flux-frameworks",
            "title": "The Evolution of Flux Frameworks",
          },
          Object {
            "authorId": 1,
            "content": "Ever wondered what it would be like to create a Chrome extension? Well, I’m here to tell you just how easy it is. Follow these steps and your idea will turn into reality and you’ll be able to publish a real extension in the Chrome Web Store in no time.",
            "fullContent": "<p name=\\"8574\\" id=\\"8574\\" class=\\"graf graf--p graf-after--figure\\">Ever wondered what it would be like to create a Chrome extension? Well, I’m here to tell you just how easy it is. Follow these steps and your idea will turn into reality and you’ll be able to publish a real extension in the <a href=\\"https://chrome.google.com/webstore/category/extensions\\" data-href=\\"https://chrome.google.com/webstore/category/extensions\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">Chrome Web Store</a> in no time.</p><h3 name=\\"9f91\\" id=\\"9f91\\" class=\\"graf graf--h3 graf-after--p\\">What is a Chrome extension?</h3><p name=\\"9205\\" id=\\"9205\\" class=\\"graf graf--p graf-after--h3\\"><span class=\\"markup--quote markup--p-quote is-other\\" name=\\"anon_c5c420b1e1a3\\" data-creator-ids=\\"anon\\">Chrome extensions allow you to add functionality to the Chrome web browser without diving deeply into native code.</span> That’s awesome because you can create new extensions for Chrome with core technologies that web developers are very familiar with - HTML, CSS, and JavaScript. If you’ve ever built a web page, you’ll will be able to create an extension faster than you can have lunch. The only thing you need to learn is how to add some functionality to Chrome through some of the JavaScript APIs that Chrome exposes.</p><p name=\\"d467\\" id=\\"d467\\" class=\\"graf graf--p graf-after--p\\">If you’re not experienced yet in building web pages, I recommend you first dive into some free resources to learn how to code, like <a href=\\"https://www.freecodecamp.org/\\" data-href=\\"https://www.freecodecamp.org/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">freeCodeCamp</a>.</p>",
            "id": 7,
            "slug": "how-to-create-and-publish-a-chrome-extension-in-20-minutes",
            "title": "How to Create and Publish a Chrome Extension in 20 minutes",
          },
          Object {
            "authorId": 2,
            "content": "People often choose Redux before they need it. “What if our app doesn’t scale without it?” Later, developers frown at the indirection Redux introduced to their code. “Why do I have to touch three files to get a simple feature working?” Why indeed!",
            "fullContent": "<p name=\\"7e78\\" id=\\"7e78\\" class=\\"graf graf--p graf-after--h3\\">People often choose Redux before they need it. “What if our app doesn’t scale without it?” Later, developers frown at the indirection Redux introduced to their code. “Why do I have to touch three files to get a simple feature working?” Why indeed!</p><ul class=\\"postList\\"><li name=\\"998d\\" id=\\"998d\\" class=\\"graf graf--li graf-after--p\\">Describe application state as plain objects and arrays.</li><li name=\\"46e5\\" id=\\"46e5\\" class=\\"graf graf--li graf-after--li\\">Describe changes in the system as plain objects.</li><li name=\\"3bca\\" id=\\"3bca\\" class=\\"graf graf--li graf-after--li\\">Describe the logic for handling changes as pure functions.</li></ul><p name=\\"5094\\" id=\\"5094\\" class=\\"graf graf--p graf-after--li\\">None of these limitations are required to build an app, with or without React. In fact these are pretty strong constraints, and you should think carefully before adopting them even in parts of your app.</p><p name=\\"448f\\" id=\\"448f\\" class=\\"graf graf--p graf-after--p\\">Do you have good reasons for doing so?</p><p name=\\"3650\\" id=\\"3650\\" class=\\"graf graf--p graf-after--p\\">These limitations are appealing to me because they help build apps that:</p>",
            "id": 8,
            "slug": "you-might-not-need-redux",
            "title": "You Might Not Need Redux",
          },
          Object {
            "authorId": 3,
            "content": "In cryptography a ‘key’ is a piece of information used in combination with an algorithm (a ‘cipher’) to transform plaintext into ciphertext (encryption) and vice versa (decryption).
A cipher can be ‘reciprocal’ if it is used for both encryption and decryption, or ‘non-reciprocal’ if a transformation to the key is required when using it in reverse.",
            "fullContent": "<h3 name=\\"5aad\\" id=\\"5aad\\" class=\\"graf graf--h3 graf--leading\\">🔑 What is a&nbsp;‘key’?</h3><p name=\\"bf3b\\" id=\\"bf3b\\" class=\\"graf graf--p graf-after--h3\\">In cryptography a ‘key’ is a piece of information used in combination with an algorithm (a ‘cipher’) to transform plaintext into ciphertext (encryption) and vice versa (decryption).</p><p name=\\"efb7\\" id=\\"efb7\\" class=\\"graf graf--p graf-after--p\\">A cipher can be ‘reciprocal’ if it is used for both encryption and decryption, or ‘non-reciprocal’ if a transformation to the key is required when using it in reverse.</p><h4 name=\\"2c0b\\" id=\\"2c0b\\" class=\\"graf graf--h4 graf-after--p\\">Non-reciprocal cipher</h4><p name=\\"3ee3\\" id=\\"3ee3\\" class=\\"graf graf--p graf-after--h4\\">A simple Caesar cipher transforms each letter of a plaintext message by shifting it a set number of places in a set direction along the basic 26 character Latin alphabet. The encryption and decryption here is not reciprocal, the key must be transformed (-3 to +3) to alter the direction of the shift when moving between encryption and decryption.</p><h4 name=\\"a26d\\" id=\\"a26d\\" class=\\"graf graf--h4 graf-after--figure\\">Reciprocal cipher</h4><p name=\\"5010\\" id=\\"5010\\" class=\\"graf graf--p graf-after--h4\\">ROT13 (rotate 13) is a specific implementation of the Caesar cipher where the shift is 13 places. Due to the basic Latin alphabet being 26 characters long this means that the direction of the shift does not matter, the result is the same in either direction. They key (13) can be used without transformation.</p>",
            "id": 9,
            "slug": "what-are-encryption-keys-and-how-do-they-work",
            "title": "What are encryption keys and how do they work?",
          },
          Object {
            "authorId": 1,
            "content": "In her talk, Tracy showed why reactive programming can be a more efficient way to code. She also discussed how it has been adopted by industry leaders such as Netflix, Slack, Microsoft, and Facebook as the new standard for developing applications. It seems very promising, especially libraries like RxJS, that help developers deliver complex features quicker with less, more maintainable code.",
            "fullContent": "<p name=\\"a432\\" id=\\"a432\\" class=\\"graf graf--p graf-after--p\\">Let me tell you five things I learned on a day filled with great talks, lots of coffee, and of course some beers.</p><h4 name=\\"a588\\" id=\\"a588\\" class=\\"graf graf--h4 graf-after--p\\">1. Reactive programming</h4><p name=\\"4779\\" id=\\"4779\\" class=\\"graf graf--p graf-after--h4\\">There will always be a new JavaScript framework to learn. Technology will continue to evolve and change, and developers will continue to rewrite applications. <a href=\\"https://twitter.com/ladyleet\\" data-href=\\"https://twitter.com/ladyleet\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">Tracy Lee</a> talked about reactive programming, which can enable you to just copy-paste most of your code from framework to framework.</p><p name=\\"b7f8\\" id=\\"b7f8\\" class=\\"graf graf--p graf-after--p\\">In her talk, Tracy showed why reactive programming can be a more efficient way to code. She also discussed how it has been adopted by industry leaders such as Netflix, Slack, Microsoft, and Facebook as the new standard for developing applications. It seems very promising, especially libraries like RxJS, that help developers deliver complex features quicker with less, more maintainable code.</p><p name=\\"994f\\" id=\\"994f\\" class=\\"graf graf--p graf-after--p\\">The more developers adopt this concept, the better.</p><p name=\\"c042\\" id=\\"c042\\" class=\\"graf graf--p graf-after--p\\">As Tracy mentioned in her blog post:</p><blockquote name=\\"57cc\\" id=\\"57cc\\" class=\\"graf graf--pullquote graf--startsWithDoubleQuote graf-after--p\\"><span class=\\"markup--quote markup--pullquote-quote is-other\\" name=\\"anon_1fccf870bc20\\" data-creator-ids=\\"anon\\">“The more people understand reactive programming, the more productive we as one modern web will all be. The only barrier to adoption is not understanding the paradigm and the language around&nbsp;it.”</span></blockquote>",
            "id": 10,
            "slug": "here-s-what-i-learned-at-the-world-s-biggest-react-conference",
            "title": "Here’s what I learned at the world’s biggest React conference",
          },
        ]
      }
    />
  </MemoryRouter>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <ListPost
        posts={
          Array [
            Object {
              "authorId": 3,
              "content": "In order for a unit test to be worthwhile it must be reliable; it should not be reliant on hopeful consistency of external dependencies in order to pass. External dependencies can include any modules/packages external to the test subject, requests to a database, or requests to an API. If running the same test several times without change can result in different outcomes, the test loses value. If trust in the test is lost, less focus is inevitably paid to test failures.",
              "fullContent": "<p name=\\"444d\\" id=\\"444d\\" class=\\"graf graf--p graf-after--figure\\"><a href=\\"https://medium.com/codeclan/testing-react-with-jest-and-enzyme-20505fec4675\\" data-href=\\"https://medium.com/codeclan/testing-react-with-jest-and-enzyme-20505fec4675\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\"><em class=\\"markup--em markup--p-em\\">Previously</em></a><em class=\\"markup--em markup--p-em\\"> we introduced the basics of using </em><a href=\\"https://jestjs.io/docs/en/getting-started\\" data-href=\\"https://jestjs.io/docs/en/getting-started\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener nofollow\\" target=\\"_blank\\"><em class=\\"markup--em markup--p-em\\">Jest</em></a><em class=\\"markup--em markup--p-em\\"> as a test runner, assertion library, and mocking library. If you have not used Jest before I recommend reading through the linked post first.</em></p><p name=\\"066f\\" id=\\"066f\\" class=\\"graf graf--p graf-after--p\\">In order for a unit test to be worthwhile it must be reliable; it should not be reliant on hopeful consistency of external dependencies in order to pass. External dependencies can include any <a href=\\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\\" data-href=\\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">modules/packages</a> external to the test subject, requests to a database, or requests to an API. If running the same test several times without change can result in different outcomes, the test loses value. If trust in the test is lost, less focus is inevitably paid to test failures.</p><p name=\\"2e8f\\" id=\\"2e8f\\" class=\\"graf graf--p graf-after--p\\">Unit tests aim to test small units of code in isolation, testing how each behaves with specific input. The responsibility of testing how different parts of a system work together lies with integration tests.</p>",
              "id": 1,
              "slug": "mocking-es-and-commonjs-modules-with-jest-mock",
              "title": "Mocking ES and CommonJS modules with jest.mock()",
            },
            Object {
              "authorId": 2,
              "content": "We know that components and top-down data flow help us organize a large UI into small, independent, reusable pieces. However, we often can’t break complex components down any further because the logic is stateful and can’t be extracted to a function or another component. Sometimes that’s what people mean when they say React doesn’t let them “separate concerns.”",
              "fullContent": "<p name=\\"7b7c\\" id=\\"7b7c\\" class=\\"graf graf--p graf-after--figure\\">I strongly recommend to watch this opening keynote to see the problems we’re trying to solve with the Hooks proposal. However, even an hour is a big time investment, so I decided to share a few thoughts on Hooks below.</p><h3 name=\\"5655\\" id=\\"5655\\" class=\\"graf graf--h3 graf-after--blockquote\\">Why Hooks?</h3><p name=\\"28ba\\" id=\\"28ba\\" class=\\"graf graf--p graf-after--h3\\">We know that components and top-down data flow help us organize a large UI into small, independent, reusable pieces. <strong class=\\"markup--strong markup--p-strong\\">However, we often can’t break complex components down any further because the logic is stateful and can’t be extracted to a function or another component.</strong> Sometimes that’s what people mean when they say React doesn’t let them “separate concerns.”</p><p name=\\"036d\\" id=\\"036d\\" class=\\"graf graf--p graf-after--p\\">These cases are very common and include animations, form handling, connecting to external data sources, and many other things we want to do from our components. When we try to solve these use cases with components alone, we usually end up with:</p>",
              "id": 2,
              "slug": "making-sense-of-react-hooks",
              "title": "Making Sense of React Hooks",
            },
            Object {
              "authorId": 1,
              "content": "Learning and mastering a new skill can be tough, but with enough persistence and motivation there is a lot we can achieve. Like learning how to code, it can be hard, frustrating and time-consuming. In the end, the most important thing to do is to keep going and gain experience.",
              "fullContent": "<p name=\\"b923\\" id=\\"b923\\" class=\\"graf graf--p graf-after--p\\">Side projects come in many forms and have lots of different purposes. Some people start them to create a nice product and eventually build a successful company, but there are many other reasons why working on side projects can be exceptionally important.</p><h3 name=\\"6bfc\\" id=\\"6bfc\\" class=\\"graf graf--h3 graf-after--p\\">Accelerate your learning.</h3><p name=\\"c1e6\\" id=\\"c1e6\\" class=\\"graf graf--p graf-after--h3\\">Learning and mastering a new skill can be tough, but with enough persistence and motivation there is a lot we can achieve. Like learning how to code, it can be hard, frustrating and time-consuming. <span class=\\"markup--quote markup--p-quote is-other\\" name=\\"anon_3afddf1c3fc5\\" data-creator-ids=\\"anon\\">In the end, the most important thing to do is to keep going and gain experience.</span></p><p name=\\"f873\\" id=\\"f873\\" class=\\"graf graf--p graf-after--p\\">Sure, it helps if you’re good at math, logical thinking and have a college degree in computer science. But for people with a non-technical background, like me, it’s still possible to become great developers with enough motivation and persistence.</p><p name=\\"4659\\" id=\\"4659\\" class=\\"graf graf--p graf-after--p\\">In my own experience, I found working on side projects in my spare time not only fun, but really helpful in developing my coding skills.</p>",
              "id": 3,
              "slug": "why-side-projects-are-so-damn-important",
              "title": "Why side projects are so damn important",
            },
            Object {
              "authorId": 3,
              "content": "CSS Grid (Grid) has been out for some time now, with full support in major modern browsers. I’ll leave others to dive into why it’s so great and what new design possibilities it makes so easy to explore. If you have been looking for the best way to support responsive web designs, I’ve yet to see anyone that doesn’t love Grid. It’s simple to use, yet extremely powerful and flexible.",
              "fullContent": "<p name=\\"da5e\\" id=\\"da5e\\" class=\\"graf graf--p graf-after--h3\\">I’ve experimented a lot with grid without thinking about progressive enhancement. I was making Codepen’s for no other purpose other than learning the spec. Almost all of them break into an embarrassing mess in non-supportive browsers.</p><p name=\\"8632\\" id=\\"8632\\" class=\\"graf graf--p graf-after--figure\\">Grid looks set to be unleashed on all browsers at the beginning of next year. As the prospect of building an actual commercial site for a client approaches, I’ve started to think about how to deal with older browsers. I started reading Aaron Gustafson’s book <em class=\\"markup--em markup--p-em\\">Adaptive Web Design: Crafting Rich Experiences with Progressive Enhancement</em>. While not mentioning CSS grid, it certainly re-emphasized the importance of the concept in my mind.</p><pre name=\\"541f\\" id=\\"541f\\" class=\\"graf graf--pre graf-after--p\\"><a href=\\"http://twitter.com/supports\\" data-href=\\"http://twitter.com/supports\\" class=\\"markup--anchor markup--pre-anchor\\" title=\\"Twitter profile for @supports\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">@supports</a> not(display: grid) {<br> .item {<br> height: 100px;<br> width: 100px;<br> margin: 20px;<br> }<br> .grid {<br> display: flex;<br> flex-wrap: wrap;<br> }<br>}</pre><p name=\\"7b9a\\" id=\\"7b9a\\" class=\\"graf graf--p graf-after--pre\\">What if you want to support browsers that don’t even support @supports? Simply use the cascading nature of CSS. If it’s old enough to have not implemented @supports it is unlikely to support flexbox, but we could give a basic float layout at the top of our stylesheet, and then overwrite it further down with</p><pre name=\\"e81d\\" id=\\"e81d\\" class=\\"graf graf--pre graf-after--p\\"><a href=\\"http://twitter.com/supports\\" data-href=\\"http://twitter.com/supports\\" class=\\"markup--anchor markup--pre-anchor\\" title=\\"Twitter profile for @supports\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">@supports</a> (display: grid) { <br>styles to overwrite float layout <br>}</pre>",
              "id": 4,
              "slug": "progressive-enhancement-with-css-grid",
              "title": "Progressive enhancement with CSS Grid",
            },
            Object {
              "authorId": 2,
              "content": "Many people get confused by the difference between components, their instances, and elements in React. Why are there three different terms to refer to something that is painted on screen?
If you’re new to React, you probably only worked with component classes and instances before. For example, you may declare a Button component by creating a class. When the program is running, you may have several instances of this component on screen, each with its own properties and local state. This is the traditional object oriented UI programming. Why introduce elements?",
              "fullContent": "<p name=\\"e47d\\" id=\\"e47d\\" class=\\"graf graf--p graf-after--h3\\">Many people get confused by <strong class=\\"markup--strong markup--p-strong\\">the difference between components, their instances, and elements in React</strong>. Why are there three different terms to refer to something that is painted on screen?</p><p name=\\"468b\\" id=\\"468b\\" class=\\"graf graf--p graf-after--p\\">If you’re new to React, you probably only worked with component classes and instances before. For example, you may declare a Button<em class=\\"markup--em markup--p-em\\"> component </em>by creating a class. When the program is running, you may have several <em class=\\"markup--em markup--p-em\\">instances </em>of this component on screen, each with its own properties and local state. This is the traditional object oriented UI programming. Why introduce <em class=\\"markup--em markup--p-em\\">elements</em>?</p><p name=\\"45f7\\" id=\\"45f7\\" class=\\"graf graf--p graf-after--p\\">In this traditional UI model, it is up to you take care of creating and destroying child component instances. If a <em class=\\"markup--em markup--p-em\\">Form</em> component wants to render a <em class=\\"markup--em markup--p-em\\">Button</em> component, it needs to create its instance, and manually keep it up to date with any new information.</p><p name=\\"c367\\" id=\\"c367\\" class=\\"graf graf--p graf-after--pre\\">This is pseudocode, but this is more or less what you end up with when you try to write composable UI that behaves consistently in an object oriented way with a framework like Backbone.</p><p name=\\"de5a\\" id=\\"de5a\\" class=\\"graf graf--p graf-after--p\\">Each component has to keep references to its DOM node and to the instances of the children components, and create, update, and destroy them when the time is right. The lines of code grow as the square of the number of possible states of the component, and the parents have direct access to their children component instances, making it hard to decouple them in the future.</p>",
              "id": 5,
              "slug": "react-components-elements-and-instances",
              "title": "React Components, Elements, and Instances",
            },
            Object {
              "authorId": 2,
              "content": "There has been no shortage of great Flux implementations, such as Flummox, Alt, or Fluxible. Most of them are focused on making Flux easier to use with the server rendering and reducing the boilerplate. They also often provide convenience utilities like higher-order components and asynchronous action helpers. Still, under the hood, many of them are built on top of the original Flux Dispatcher.",
              "fullContent": "<p name=\\"f9ff\\" id=\\"f9ff\\" class=\\"graf graf--p graf-after--figure\\">There has been no shortage of great Flux implementations, such as <a href=\\"https://github.com/acdlite/flummox\\" data-href=\\"https://github.com/acdlite/flummox\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flummox</a>, <a href=\\"https://github.com/goatslacker/alt\\" data-href=\\"https://github.com/goatslacker/alt\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Alt</a>, or <a href=\\"http://fluxible.io/\\" data-href=\\"http://fluxible.io/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Fluxible</a>. Most of them are focused on making Flux easier to use with the server rendering and reducing the boilerplate. They also often provide convenience utilities like <a href=\\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\\" data-href=\\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\">higher-order components</a> and asynchronous action helpers. Still, under the hood, many of them are built on top of the original <a href=\\"https://facebook.github.io/flux/docs/dispatcher.html\\" data-href=\\"https://facebook.github.io/flux/docs/dispatcher.html\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flux Dispatcher</a>.</p><p name=\\"25d1\\" id=\\"25d1\\" class=\\"graf graf--p graf-after--p\\">Say, if the actions aren’t plain objects flowing through a central dispatcher, it is much harder to <a href=\\"https://medium.com/@nextminds/replaying-bugs-with-flux-52f6bd8c8307\\" data-href=\\"https://medium.com/@nextminds/replaying-bugs-with-flux-52f6bd8c8307\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\">record and replay actions</a> for debugging. If the action type constants are not explicitly specified, and instead are generated from the method names, they might be more difficult to use together with the static analysis tools like <a href=\\"http://flowtype.org/\\" data-href=\\"http://flowtype.org/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flow</a>. That there is no single Flux library is a good thing, as the acceptable tradeoffs may vary for every team.</p><p name=\\"fb25\\" id=\\"fb25\\" class=\\"graf graf--p graf-after--p\\">Sure, figuring out how to make the isomorphic Flux easy was a step forward, but after that, the changes I have seen were either too cosmetic, or too drastic to call it Flux. <strong class=\\"markup--strong markup--p-strong\\">The unidirectional data flow is important, but so is the relative ease of use of Flux, even for people who are not very keen on the functional programming yet.</strong> I think that if something requires you to understand cursors or observables, it might be great, but it’s not Flux. (I <em class=\\"markup--em markup--p-em\\">do</em> like observables. But that’s not my point.)</p><p name=\\"8953\\" id=\\"8953\\" class=\\"graf graf--p graf-after--p\\">So is Flux evolving? For the first time in many months, I think that the answer is <em class=\\"markup--em markup--p-em\\">yes</em>. There are two API changes that I have noticed consistently in many new Flux implementations. These changes complement each other, and while they seem cosmetic, they also open up some exciting possibilities that weren’t available before. And they don’t even introduce any new concepts, such as cursors or observables!</p>",
              "id": 6,
              "slug": "the-evolution-of-flux-frameworks",
              "title": "The Evolution of Flux Frameworks",
            },
            Object {
              "authorId": 1,
              "content": "Ever wondered what it would be like to create a Chrome extension? Well, I’m here to tell you just how easy it is. Follow these steps and your idea will turn into reality and you’ll be able to publish a real extension in the Chrome Web Store in no time.",
              "fullContent": "<p name=\\"8574\\" id=\\"8574\\" class=\\"graf graf--p graf-after--figure\\">Ever wondered what it would be like to create a Chrome extension? Well, I’m here to tell you just how easy it is. Follow these steps and your idea will turn into reality and you’ll be able to publish a real extension in the <a href=\\"https://chrome.google.com/webstore/category/extensions\\" data-href=\\"https://chrome.google.com/webstore/category/extensions\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">Chrome Web Store</a> in no time.</p><h3 name=\\"9f91\\" id=\\"9f91\\" class=\\"graf graf--h3 graf-after--p\\">What is a Chrome extension?</h3><p name=\\"9205\\" id=\\"9205\\" class=\\"graf graf--p graf-after--h3\\"><span class=\\"markup--quote markup--p-quote is-other\\" name=\\"anon_c5c420b1e1a3\\" data-creator-ids=\\"anon\\">Chrome extensions allow you to add functionality to the Chrome web browser without diving deeply into native code.</span> That’s awesome because you can create new extensions for Chrome with core technologies that web developers are very familiar with - HTML, CSS, and JavaScript. If you’ve ever built a web page, you’ll will be able to create an extension faster than you can have lunch. The only thing you need to learn is how to add some functionality to Chrome through some of the JavaScript APIs that Chrome exposes.</p><p name=\\"d467\\" id=\\"d467\\" class=\\"graf graf--p graf-after--p\\">If you’re not experienced yet in building web pages, I recommend you first dive into some free resources to learn how to code, like <a href=\\"https://www.freecodecamp.org/\\" data-href=\\"https://www.freecodecamp.org/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">freeCodeCamp</a>.</p>",
              "id": 7,
              "slug": "how-to-create-and-publish-a-chrome-extension-in-20-minutes",
              "title": "How to Create and Publish a Chrome Extension in 20 minutes",
            },
            Object {
              "authorId": 2,
              "content": "People often choose Redux before they need it. “What if our app doesn’t scale without it?” Later, developers frown at the indirection Redux introduced to their code. “Why do I have to touch three files to get a simple feature working?” Why indeed!",
              "fullContent": "<p name=\\"7e78\\" id=\\"7e78\\" class=\\"graf graf--p graf-after--h3\\">People often choose Redux before they need it. “What if our app doesn’t scale without it?” Later, developers frown at the indirection Redux introduced to their code. “Why do I have to touch three files to get a simple feature working?” Why indeed!</p><ul class=\\"postList\\"><li name=\\"998d\\" id=\\"998d\\" class=\\"graf graf--li graf-after--p\\">Describe application state as plain objects and arrays.</li><li name=\\"46e5\\" id=\\"46e5\\" class=\\"graf graf--li graf-after--li\\">Describe changes in the system as plain objects.</li><li name=\\"3bca\\" id=\\"3bca\\" class=\\"graf graf--li graf-after--li\\">Describe the logic for handling changes as pure functions.</li></ul><p name=\\"5094\\" id=\\"5094\\" class=\\"graf graf--p graf-after--li\\">None of these limitations are required to build an app, with or without React. In fact these are pretty strong constraints, and you should think carefully before adopting them even in parts of your app.</p><p name=\\"448f\\" id=\\"448f\\" class=\\"graf graf--p graf-after--p\\">Do you have good reasons for doing so?</p><p name=\\"3650\\" id=\\"3650\\" class=\\"graf graf--p graf-after--p\\">These limitations are appealing to me because they help build apps that:</p>",
              "id": 8,
              "slug": "you-might-not-need-redux",
              "title": "You Might Not Need Redux",
            },
            Object {
              "authorId": 3,
              "content": "In cryptography a ‘key’ is a piece of information used in combination with an algorithm (a ‘cipher’) to transform plaintext into ciphertext (encryption) and vice versa (decryption).
A cipher can be ‘reciprocal’ if it is used for both encryption and decryption, or ‘non-reciprocal’ if a transformation to the key is required when using it in reverse.",
              "fullContent": "<h3 name=\\"5aad\\" id=\\"5aad\\" class=\\"graf graf--h3 graf--leading\\">🔑 What is a&nbsp;‘key’?</h3><p name=\\"bf3b\\" id=\\"bf3b\\" class=\\"graf graf--p graf-after--h3\\">In cryptography a ‘key’ is a piece of information used in combination with an algorithm (a ‘cipher’) to transform plaintext into ciphertext (encryption) and vice versa (decryption).</p><p name=\\"efb7\\" id=\\"efb7\\" class=\\"graf graf--p graf-after--p\\">A cipher can be ‘reciprocal’ if it is used for both encryption and decryption, or ‘non-reciprocal’ if a transformation to the key is required when using it in reverse.</p><h4 name=\\"2c0b\\" id=\\"2c0b\\" class=\\"graf graf--h4 graf-after--p\\">Non-reciprocal cipher</h4><p name=\\"3ee3\\" id=\\"3ee3\\" class=\\"graf graf--p graf-after--h4\\">A simple Caesar cipher transforms each letter of a plaintext message by shifting it a set number of places in a set direction along the basic 26 character Latin alphabet. The encryption and decryption here is not reciprocal, the key must be transformed (-3 to +3) to alter the direction of the shift when moving between encryption and decryption.</p><h4 name=\\"a26d\\" id=\\"a26d\\" class=\\"graf graf--h4 graf-after--figure\\">Reciprocal cipher</h4><p name=\\"5010\\" id=\\"5010\\" class=\\"graf graf--p graf-after--h4\\">ROT13 (rotate 13) is a specific implementation of the Caesar cipher where the shift is 13 places. Due to the basic Latin alphabet being 26 characters long this means that the direction of the shift does not matter, the result is the same in either direction. They key (13) can be used without transformation.</p>",
              "id": 9,
              "slug": "what-are-encryption-keys-and-how-do-they-work",
              "title": "What are encryption keys and how do they work?",
            },
            Object {
              "authorId": 1,
              "content": "In her talk, Tracy showed why reactive programming can be a more efficient way to code. She also discussed how it has been adopted by industry leaders such as Netflix, Slack, Microsoft, and Facebook as the new standard for developing applications. It seems very promising, especially libraries like RxJS, that help developers deliver complex features quicker with less, more maintainable code.",
              "fullContent": "<p name=\\"a432\\" id=\\"a432\\" class=\\"graf graf--p graf-after--p\\">Let me tell you five things I learned on a day filled with great talks, lots of coffee, and of course some beers.</p><h4 name=\\"a588\\" id=\\"a588\\" class=\\"graf graf--h4 graf-after--p\\">1. Reactive programming</h4><p name=\\"4779\\" id=\\"4779\\" class=\\"graf graf--p graf-after--h4\\">There will always be a new JavaScript framework to learn. Technology will continue to evolve and change, and developers will continue to rewrite applications. <a href=\\"https://twitter.com/ladyleet\\" data-href=\\"https://twitter.com/ladyleet\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">Tracy Lee</a> talked about reactive programming, which can enable you to just copy-paste most of your code from framework to framework.</p><p name=\\"b7f8\\" id=\\"b7f8\\" class=\\"graf graf--p graf-after--p\\">In her talk, Tracy showed why reactive programming can be a more efficient way to code. She also discussed how it has been adopted by industry leaders such as Netflix, Slack, Microsoft, and Facebook as the new standard for developing applications. It seems very promising, especially libraries like RxJS, that help developers deliver complex features quicker with less, more maintainable code.</p><p name=\\"994f\\" id=\\"994f\\" class=\\"graf graf--p graf-after--p\\">The more developers adopt this concept, the better.</p><p name=\\"c042\\" id=\\"c042\\" class=\\"graf graf--p graf-after--p\\">As Tracy mentioned in her blog post:</p><blockquote name=\\"57cc\\" id=\\"57cc\\" class=\\"graf graf--pullquote graf--startsWithDoubleQuote graf-after--p\\"><span class=\\"markup--quote markup--pullquote-quote is-other\\" name=\\"anon_1fccf870bc20\\" data-creator-ids=\\"anon\\">“The more people understand reactive programming, the more productive we as one modern web will all be. The only barrier to adoption is not understanding the paradigm and the language around&nbsp;it.”</span></blockquote>",
              "id": 10,
              "slug": "here-s-what-i-learned-at-the-world-s-biggest-react-conference",
              "title": "Here’s what I learned at the world’s biggest React conference",
            },
          ]
        }
      />,
      "history": Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "posts": Array [
          Object {
            "authorId": 3,
            "content": "In order for a unit test to be worthwhile it must be reliable; it should not be reliant on hopeful consistency of external dependencies in order to pass. External dependencies can include any modules/packages external to the test subject, requests to a database, or requests to an API. If running the same test several times without change can result in different outcomes, the test loses value. If trust in the test is lost, less focus is inevitably paid to test failures.",
            "fullContent": "<p name=\\"444d\\" id=\\"444d\\" class=\\"graf graf--p graf-after--figure\\"><a href=\\"https://medium.com/codeclan/testing-react-with-jest-and-enzyme-20505fec4675\\" data-href=\\"https://medium.com/codeclan/testing-react-with-jest-and-enzyme-20505fec4675\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\"><em class=\\"markup--em markup--p-em\\">Previously</em></a><em class=\\"markup--em markup--p-em\\"> we introduced the basics of using </em><a href=\\"https://jestjs.io/docs/en/getting-started\\" data-href=\\"https://jestjs.io/docs/en/getting-started\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener nofollow\\" target=\\"_blank\\"><em class=\\"markup--em markup--p-em\\">Jest</em></a><em class=\\"markup--em markup--p-em\\"> as a test runner, assertion library, and mocking library. If you have not used Jest before I recommend reading through the linked post first.</em></p><p name=\\"066f\\" id=\\"066f\\" class=\\"graf graf--p graf-after--p\\">In order for a unit test to be worthwhile it must be reliable; it should not be reliant on hopeful consistency of external dependencies in order to pass. External dependencies can include any <a href=\\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\\" data-href=\\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">modules/packages</a> external to the test subject, requests to a database, or requests to an API. If running the same test several times without change can result in different outcomes, the test loses value. If trust in the test is lost, less focus is inevitably paid to test failures.</p><p name=\\"2e8f\\" id=\\"2e8f\\" class=\\"graf graf--p graf-after--p\\">Unit tests aim to test small units of code in isolation, testing how each behaves with specific input. The responsibility of testing how different parts of a system work together lies with integration tests.</p>",
            "id": 1,
            "slug": "mocking-es-and-commonjs-modules-with-jest-mock",
            "title": "Mocking ES and CommonJS modules with jest.mock()",
          },
          Object {
            "authorId": 2,
            "content": "We know that components and top-down data flow help us organize a large UI into small, independent, reusable pieces. However, we often can’t break complex components down any further because the logic is stateful and can’t be extracted to a function or another component. Sometimes that’s what people mean when they say React doesn’t let them “separate concerns.”",
            "fullContent": "<p name=\\"7b7c\\" id=\\"7b7c\\" class=\\"graf graf--p graf-after--figure\\">I strongly recommend to watch this opening keynote to see the problems we’re trying to solve with the Hooks proposal. However, even an hour is a big time investment, so I decided to share a few thoughts on Hooks below.</p><h3 name=\\"5655\\" id=\\"5655\\" class=\\"graf graf--h3 graf-after--blockquote\\">Why Hooks?</h3><p name=\\"28ba\\" id=\\"28ba\\" class=\\"graf graf--p graf-after--h3\\">We know that components and top-down data flow help us organize a large UI into small, independent, reusable pieces. <strong class=\\"markup--strong markup--p-strong\\">However, we often can’t break complex components down any further because the logic is stateful and can’t be extracted to a function or another component.</strong> Sometimes that’s what people mean when they say React doesn’t let them “separate concerns.”</p><p name=\\"036d\\" id=\\"036d\\" class=\\"graf graf--p graf-after--p\\">These cases are very common and include animations, form handling, connecting to external data sources, and many other things we want to do from our components. When we try to solve these use cases with components alone, we usually end up with:</p>",
            "id": 2,
            "slug": "making-sense-of-react-hooks",
            "title": "Making Sense of React Hooks",
          },
          Object {
            "authorId": 1,
            "content": "Learning and mastering a new skill can be tough, but with enough persistence and motivation there is a lot we can achieve. Like learning how to code, it can be hard, frustrating and time-consuming. In the end, the most important thing to do is to keep going and gain experience.",
            "fullContent": "<p name=\\"b923\\" id=\\"b923\\" class=\\"graf graf--p graf-after--p\\">Side projects come in many forms and have lots of different purposes. Some people start them to create a nice product and eventually build a successful company, but there are many other reasons why working on side projects can be exceptionally important.</p><h3 name=\\"6bfc\\" id=\\"6bfc\\" class=\\"graf graf--h3 graf-after--p\\">Accelerate your learning.</h3><p name=\\"c1e6\\" id=\\"c1e6\\" class=\\"graf graf--p graf-after--h3\\">Learning and mastering a new skill can be tough, but with enough persistence and motivation there is a lot we can achieve. Like learning how to code, it can be hard, frustrating and time-consuming. <span class=\\"markup--quote markup--p-quote is-other\\" name=\\"anon_3afddf1c3fc5\\" data-creator-ids=\\"anon\\">In the end, the most important thing to do is to keep going and gain experience.</span></p><p name=\\"f873\\" id=\\"f873\\" class=\\"graf graf--p graf-after--p\\">Sure, it helps if you’re good at math, logical thinking and have a college degree in computer science. But for people with a non-technical background, like me, it’s still possible to become great developers with enough motivation and persistence.</p><p name=\\"4659\\" id=\\"4659\\" class=\\"graf graf--p graf-after--p\\">In my own experience, I found working on side projects in my spare time not only fun, but really helpful in developing my coding skills.</p>",
            "id": 3,
            "slug": "why-side-projects-are-so-damn-important",
            "title": "Why side projects are so damn important",
          },
          Object {
            "authorId": 3,
            "content": "CSS Grid (Grid) has been out for some time now, with full support in major modern browsers. I’ll leave others to dive into why it’s so great and what new design possibilities it makes so easy to explore. If you have been looking for the best way to support responsive web designs, I’ve yet to see anyone that doesn’t love Grid. It’s simple to use, yet extremely powerful and flexible.",
            "fullContent": "<p name=\\"da5e\\" id=\\"da5e\\" class=\\"graf graf--p graf-after--h3\\">I’ve experimented a lot with grid without thinking about progressive enhancement. I was making Codepen’s for no other purpose other than learning the spec. Almost all of them break into an embarrassing mess in non-supportive browsers.</p><p name=\\"8632\\" id=\\"8632\\" class=\\"graf graf--p graf-after--figure\\">Grid looks set to be unleashed on all browsers at the beginning of next year. As the prospect of building an actual commercial site for a client approaches, I’ve started to think about how to deal with older browsers. I started reading Aaron Gustafson’s book <em class=\\"markup--em markup--p-em\\">Adaptive Web Design: Crafting Rich Experiences with Progressive Enhancement</em>. While not mentioning CSS grid, it certainly re-emphasized the importance of the concept in my mind.</p><pre name=\\"541f\\" id=\\"541f\\" class=\\"graf graf--pre graf-after--p\\"><a href=\\"http://twitter.com/supports\\" data-href=\\"http://twitter.com/supports\\" class=\\"markup--anchor markup--pre-anchor\\" title=\\"Twitter profile for @supports\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">@supports</a> not(display: grid) {<br> .item {<br> height: 100px;<br> width: 100px;<br> margin: 20px;<br> }<br> .grid {<br> display: flex;<br> flex-wrap: wrap;<br> }<br>}</pre><p name=\\"7b9a\\" id=\\"7b9a\\" class=\\"graf graf--p graf-after--pre\\">What if you want to support browsers that don’t even support @supports? Simply use the cascading nature of CSS. If it’s old enough to have not implemented @supports it is unlikely to support flexbox, but we could give a basic float layout at the top of our stylesheet, and then overwrite it further down with</p><pre name=\\"e81d\\" id=\\"e81d\\" class=\\"graf graf--pre graf-after--p\\"><a href=\\"http://twitter.com/supports\\" data-href=\\"http://twitter.com/supports\\" class=\\"markup--anchor markup--pre-anchor\\" title=\\"Twitter profile for @supports\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">@supports</a> (display: grid) { <br>styles to overwrite float layout <br>}</pre>",
            "id": 4,
            "slug": "progressive-enhancement-with-css-grid",
            "title": "Progressive enhancement with CSS Grid",
          },
          Object {
            "authorId": 2,
            "content": "Many people get confused by the difference between components, their instances, and elements in React. Why are there three different terms to refer to something that is painted on screen?
If you’re new to React, you probably only worked with component classes and instances before. For example, you may declare a Button component by creating a class. When the program is running, you may have several instances of this component on screen, each with its own properties and local state. This is the traditional object oriented UI programming. Why introduce elements?",
            "fullContent": "<p name=\\"e47d\\" id=\\"e47d\\" class=\\"graf graf--p graf-after--h3\\">Many people get confused by <strong class=\\"markup--strong markup--p-strong\\">the difference between components, their instances, and elements in React</strong>. Why are there three different terms to refer to something that is painted on screen?</p><p name=\\"468b\\" id=\\"468b\\" class=\\"graf graf--p graf-after--p\\">If you’re new to React, you probably only worked with component classes and instances before. For example, you may declare a Button<em class=\\"markup--em markup--p-em\\"> component </em>by creating a class. When the program is running, you may have several <em class=\\"markup--em markup--p-em\\">instances </em>of this component on screen, each with its own properties and local state. This is the traditional object oriented UI programming. Why introduce <em class=\\"markup--em markup--p-em\\">elements</em>?</p><p name=\\"45f7\\" id=\\"45f7\\" class=\\"graf graf--p graf-after--p\\">In this traditional UI model, it is up to you take care of creating and destroying child component instances. If a <em class=\\"markup--em markup--p-em\\">Form</em> component wants to render a <em class=\\"markup--em markup--p-em\\">Button</em> component, it needs to create its instance, and manually keep it up to date with any new information.</p><p name=\\"c367\\" id=\\"c367\\" class=\\"graf graf--p graf-after--pre\\">This is pseudocode, but this is more or less what you end up with when you try to write composable UI that behaves consistently in an object oriented way with a framework like Backbone.</p><p name=\\"de5a\\" id=\\"de5a\\" class=\\"graf graf--p graf-after--p\\">Each component has to keep references to its DOM node and to the instances of the children components, and create, update, and destroy them when the time is right. The lines of code grow as the square of the number of possible states of the component, and the parents have direct access to their children component instances, making it hard to decouple them in the future.</p>",
            "id": 5,
            "slug": "react-components-elements-and-instances",
            "title": "React Components, Elements, and Instances",
          },
          Object {
            "authorId": 2,
            "content": "There has been no shortage of great Flux implementations, such as Flummox, Alt, or Fluxible. Most of them are focused on making Flux easier to use with the server rendering and reducing the boilerplate. They also often provide convenience utilities like higher-order components and asynchronous action helpers. Still, under the hood, many of them are built on top of the original Flux Dispatcher.",
            "fullContent": "<p name=\\"f9ff\\" id=\\"f9ff\\" class=\\"graf graf--p graf-after--figure\\">There has been no shortage of great Flux implementations, such as <a href=\\"https://github.com/acdlite/flummox\\" data-href=\\"https://github.com/acdlite/flummox\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flummox</a>, <a href=\\"https://github.com/goatslacker/alt\\" data-href=\\"https://github.com/goatslacker/alt\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Alt</a>, or <a href=\\"http://fluxible.io/\\" data-href=\\"http://fluxible.io/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Fluxible</a>. Most of them are focused on making Flux easier to use with the server rendering and reducing the boilerplate. They also often provide convenience utilities like <a href=\\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\\" data-href=\\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\">higher-order components</a> and asynchronous action helpers. Still, under the hood, many of them are built on top of the original <a href=\\"https://facebook.github.io/flux/docs/dispatcher.html\\" data-href=\\"https://facebook.github.io/flux/docs/dispatcher.html\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flux Dispatcher</a>.</p><p name=\\"25d1\\" id=\\"25d1\\" class=\\"graf graf--p graf-after--p\\">Say, if the actions aren’t plain objects flowing through a central dispatcher, it is much harder to <a href=\\"https://medium.com/@nextminds/replaying-bugs-with-flux-52f6bd8c8307\\" data-href=\\"https://medium.com/@nextminds/replaying-bugs-with-flux-52f6bd8c8307\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\">record and replay actions</a> for debugging. If the action type constants are not explicitly specified, and instead are generated from the method names, they might be more difficult to use together with the static analysis tools like <a href=\\"http://flowtype.org/\\" data-href=\\"http://flowtype.org/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flow</a>. That there is no single Flux library is a good thing, as the acceptable tradeoffs may vary for every team.</p><p name=\\"fb25\\" id=\\"fb25\\" class=\\"graf graf--p graf-after--p\\">Sure, figuring out how to make the isomorphic Flux easy was a step forward, but after that, the changes I have seen were either too cosmetic, or too drastic to call it Flux. <strong class=\\"markup--strong markup--p-strong\\">The unidirectional data flow is important, but so is the relative ease of use of Flux, even for people who are not very keen on the functional programming yet.</strong> I think that if something requires you to understand cursors or observables, it might be great, but it’s not Flux. (I <em class=\\"markup--em markup--p-em\\">do</em> like observables. But that’s not my point.)</p><p name=\\"8953\\" id=\\"8953\\" class=\\"graf graf--p graf-after--p\\">So is Flux evolving? For the first time in many months, I think that the answer is <em class=\\"markup--em markup--p-em\\">yes</em>. There are two API changes that I have noticed consistently in many new Flux implementations. These changes complement each other, and while they seem cosmetic, they also open up some exciting possibilities that weren’t available before. And they don’t even introduce any new concepts, such as cursors or observables!</p>",
            "id": 6,
            "slug": "the-evolution-of-flux-frameworks",
            "title": "The Evolution of Flux Frameworks",
          },
          Object {
            "authorId": 1,
            "content": "Ever wondered what it would be like to create a Chrome extension? Well, I’m here to tell you just how easy it is. Follow these steps and your idea will turn into reality and you’ll be able to publish a real extension in the Chrome Web Store in no time.",
            "fullContent": "<p name=\\"8574\\" id=\\"8574\\" class=\\"graf graf--p graf-after--figure\\">Ever wondered what it would be like to create a Chrome extension? Well, I’m here to tell you just how easy it is. Follow these steps and your idea will turn into reality and you’ll be able to publish a real extension in the <a href=\\"https://chrome.google.com/webstore/category/extensions\\" data-href=\\"https://chrome.google.com/webstore/category/extensions\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">Chrome Web Store</a> in no time.</p><h3 name=\\"9f91\\" id=\\"9f91\\" class=\\"graf graf--h3 graf-after--p\\">What is a Chrome extension?</h3><p name=\\"9205\\" id=\\"9205\\" class=\\"graf graf--p graf-after--h3\\"><span class=\\"markup--quote markup--p-quote is-other\\" name=\\"anon_c5c420b1e1a3\\" data-creator-ids=\\"anon\\">Chrome extensions allow you to add functionality to the Chrome web browser without diving deeply into native code.</span> That’s awesome because you can create new extensions for Chrome with core technologies that web developers are very familiar with - HTML, CSS, and JavaScript. If you’ve ever built a web page, you’ll will be able to create an extension faster than you can have lunch. The only thing you need to learn is how to add some functionality to Chrome through some of the JavaScript APIs that Chrome exposes.</p><p name=\\"d467\\" id=\\"d467\\" class=\\"graf graf--p graf-after--p\\">If you’re not experienced yet in building web pages, I recommend you first dive into some free resources to learn how to code, like <a href=\\"https://www.freecodecamp.org/\\" data-href=\\"https://www.freecodecamp.org/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">freeCodeCamp</a>.</p>",
            "id": 7,
            "slug": "how-to-create-and-publish-a-chrome-extension-in-20-minutes",
            "title": "How to Create and Publish a Chrome Extension in 20 minutes",
          },
          Object {
            "authorId": 2,
            "content": "People often choose Redux before they need it. “What if our app doesn’t scale without it?” Later, developers frown at the indirection Redux introduced to their code. “Why do I have to touch three files to get a simple feature working?” Why indeed!",
            "fullContent": "<p name=\\"7e78\\" id=\\"7e78\\" class=\\"graf graf--p graf-after--h3\\">People often choose Redux before they need it. “What if our app doesn’t scale without it?” Later, developers frown at the indirection Redux introduced to their code. “Why do I have to touch three files to get a simple feature working?” Why indeed!</p><ul class=\\"postList\\"><li name=\\"998d\\" id=\\"998d\\" class=\\"graf graf--li graf-after--p\\">Describe application state as plain objects and arrays.</li><li name=\\"46e5\\" id=\\"46e5\\" class=\\"graf graf--li graf-after--li\\">Describe changes in the system as plain objects.</li><li name=\\"3bca\\" id=\\"3bca\\" class=\\"graf graf--li graf-after--li\\">Describe the logic for handling changes as pure functions.</li></ul><p name=\\"5094\\" id=\\"5094\\" class=\\"graf graf--p graf-after--li\\">None of these limitations are required to build an app, with or without React. In fact these are pretty strong constraints, and you should think carefully before adopting them even in parts of your app.</p><p name=\\"448f\\" id=\\"448f\\" class=\\"graf graf--p graf-after--p\\">Do you have good reasons for doing so?</p><p name=\\"3650\\" id=\\"3650\\" class=\\"graf graf--p graf-after--p\\">These limitations are appealing to me because they help build apps that:</p>",
            "id": 8,
            "slug": "you-might-not-need-redux",
            "title": "You Might Not Need Redux",
          },
          Object {
            "authorId": 3,
            "content": "In cryptography a ‘key’ is a piece of information used in combination with an algorithm (a ‘cipher’) to transform plaintext into ciphertext (encryption) and vice versa (decryption).
A cipher can be ‘reciprocal’ if it is used for both encryption and decryption, or ‘non-reciprocal’ if a transformation to the key is required when using it in reverse.",
            "fullContent": "<h3 name=\\"5aad\\" id=\\"5aad\\" class=\\"graf graf--h3 graf--leading\\">🔑 What is a&nbsp;‘key’?</h3><p name=\\"bf3b\\" id=\\"bf3b\\" class=\\"graf graf--p graf-after--h3\\">In cryptography a ‘key’ is a piece of information used in combination with an algorithm (a ‘cipher’) to transform plaintext into ciphertext (encryption) and vice versa (decryption).</p><p name=\\"efb7\\" id=\\"efb7\\" class=\\"graf graf--p graf-after--p\\">A cipher can be ‘reciprocal’ if it is used for both encryption and decryption, or ‘non-reciprocal’ if a transformation to the key is required when using it in reverse.</p><h4 name=\\"2c0b\\" id=\\"2c0b\\" class=\\"graf graf--h4 graf-after--p\\">Non-reciprocal cipher</h4><p name=\\"3ee3\\" id=\\"3ee3\\" class=\\"graf graf--p graf-after--h4\\">A simple Caesar cipher transforms each letter of a plaintext message by shifting it a set number of places in a set direction along the basic 26 character Latin alphabet. The encryption and decryption here is not reciprocal, the key must be transformed (-3 to +3) to alter the direction of the shift when moving between encryption and decryption.</p><h4 name=\\"a26d\\" id=\\"a26d\\" class=\\"graf graf--h4 graf-after--figure\\">Reciprocal cipher</h4><p name=\\"5010\\" id=\\"5010\\" class=\\"graf graf--p graf-after--h4\\">ROT13 (rotate 13) is a specific implementation of the Caesar cipher where the shift is 13 places. Due to the basic Latin alphabet being 26 characters long this means that the direction of the shift does not matter, the result is the same in either direction. They key (13) can be used without transformation.</p>",
            "id": 9,
            "slug": "what-are-encryption-keys-and-how-do-they-work",
            "title": "What are encryption keys and how do they work?",
          },
          Object {
            "authorId": 1,
            "content": "In her talk, Tracy showed why reactive programming can be a more efficient way to code. She also discussed how it has been adopted by industry leaders such as Netflix, Slack, Microsoft, and Facebook as the new standard for developing applications. It seems very promising, especially libraries like RxJS, that help developers deliver complex features quicker with less, more maintainable code.",
            "fullContent": "<p name=\\"a432\\" id=\\"a432\\" class=\\"graf graf--p graf-after--p\\">Let me tell you five things I learned on a day filled with great talks, lots of coffee, and of course some beers.</p><h4 name=\\"a588\\" id=\\"a588\\" class=\\"graf graf--h4 graf-after--p\\">1. Reactive programming</h4><p name=\\"4779\\" id=\\"4779\\" class=\\"graf graf--p graf-after--h4\\">There will always be a new JavaScript framework to learn. Technology will continue to evolve and change, and developers will continue to rewrite applications. <a href=\\"https://twitter.com/ladyleet\\" data-href=\\"https://twitter.com/ladyleet\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">Tracy Lee</a> talked about reactive programming, which can enable you to just copy-paste most of your code from framework to framework.</p><p name=\\"b7f8\\" id=\\"b7f8\\" class=\\"graf graf--p graf-after--p\\">In her talk, Tracy showed why reactive programming can be a more efficient way to code. She also discussed how it has been adopted by industry leaders such as Netflix, Slack, Microsoft, and Facebook as the new standard for developing applications. It seems very promising, especially libraries like RxJS, that help developers deliver complex features quicker with less, more maintainable code.</p><p name=\\"994f\\" id=\\"994f\\" class=\\"graf graf--p graf-after--p\\">The more developers adopt this concept, the better.</p><p name=\\"c042\\" id=\\"c042\\" class=\\"graf graf--p graf-after--p\\">As Tracy mentioned in her blog post:</p><blockquote name=\\"57cc\\" id=\\"57cc\\" class=\\"graf graf--pullquote graf--startsWithDoubleQuote graf-after--p\\"><span class=\\"markup--quote markup--pullquote-quote is-other\\" name=\\"anon_1fccf870bc20\\" data-creator-ids=\\"anon\\">“The more people understand reactive programming, the more productive we as one modern web will all be. The only barrier to adoption is not understanding the paradigm and the language around&nbsp;it.”</span></blockquote>",
            "id": 10,
            "slug": "here-s-what-i-learned-at-the-world-s-biggest-react-conference",
            "title": "Here’s what I learned at the world’s biggest React conference",
          },
        ],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <ListPost
          posts={
            Array [
              Object {
                "authorId": 3,
                "content": "In order for a unit test to be worthwhile it must be reliable; it should not be reliant on hopeful consistency of external dependencies in order to pass. External dependencies can include any modules/packages external to the test subject, requests to a database, or requests to an API. If running the same test several times without change can result in different outcomes, the test loses value. If trust in the test is lost, less focus is inevitably paid to test failures.",
                "fullContent": "<p name=\\"444d\\" id=\\"444d\\" class=\\"graf graf--p graf-after--figure\\"><a href=\\"https://medium.com/codeclan/testing-react-with-jest-and-enzyme-20505fec4675\\" data-href=\\"https://medium.com/codeclan/testing-react-with-jest-and-enzyme-20505fec4675\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\"><em class=\\"markup--em markup--p-em\\">Previously</em></a><em class=\\"markup--em markup--p-em\\"> we introduced the basics of using </em><a href=\\"https://jestjs.io/docs/en/getting-started\\" data-href=\\"https://jestjs.io/docs/en/getting-started\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener nofollow\\" target=\\"_blank\\"><em class=\\"markup--em markup--p-em\\">Jest</em></a><em class=\\"markup--em markup--p-em\\"> as a test runner, assertion library, and mocking library. If you have not used Jest before I recommend reading through the linked post first.</em></p><p name=\\"066f\\" id=\\"066f\\" class=\\"graf graf--p graf-after--p\\">In order for a unit test to be worthwhile it must be reliable; it should not be reliant on hopeful consistency of external dependencies in order to pass. External dependencies can include any <a href=\\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\\" data-href=\\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">modules/packages</a> external to the test subject, requests to a database, or requests to an API. If running the same test several times without change can result in different outcomes, the test loses value. If trust in the test is lost, less focus is inevitably paid to test failures.</p><p name=\\"2e8f\\" id=\\"2e8f\\" class=\\"graf graf--p graf-after--p\\">Unit tests aim to test small units of code in isolation, testing how each behaves with specific input. The responsibility of testing how different parts of a system work together lies with integration tests.</p>",
                "id": 1,
                "slug": "mocking-es-and-commonjs-modules-with-jest-mock",
                "title": "Mocking ES and CommonJS modules with jest.mock()",
              },
              Object {
                "authorId": 2,
                "content": "We know that components and top-down data flow help us organize a large UI into small, independent, reusable pieces. However, we often can’t break complex components down any further because the logic is stateful and can’t be extracted to a function or another component. Sometimes that’s what people mean when they say React doesn’t let them “separate concerns.”",
                "fullContent": "<p name=\\"7b7c\\" id=\\"7b7c\\" class=\\"graf graf--p graf-after--figure\\">I strongly recommend to watch this opening keynote to see the problems we’re trying to solve with the Hooks proposal. However, even an hour is a big time investment, so I decided to share a few thoughts on Hooks below.</p><h3 name=\\"5655\\" id=\\"5655\\" class=\\"graf graf--h3 graf-after--blockquote\\">Why Hooks?</h3><p name=\\"28ba\\" id=\\"28ba\\" class=\\"graf graf--p graf-after--h3\\">We know that components and top-down data flow help us organize a large UI into small, independent, reusable pieces. <strong class=\\"markup--strong markup--p-strong\\">However, we often can’t break complex components down any further because the logic is stateful and can’t be extracted to a function or another component.</strong> Sometimes that’s what people mean when they say React doesn’t let them “separate concerns.”</p><p name=\\"036d\\" id=\\"036d\\" class=\\"graf graf--p graf-after--p\\">These cases are very common and include animations, form handling, connecting to external data sources, and many other things we want to do from our components. When we try to solve these use cases with components alone, we usually end up with:</p>",
                "id": 2,
                "slug": "making-sense-of-react-hooks",
                "title": "Making Sense of React Hooks",
              },
              Object {
                "authorId": 1,
                "content": "Learning and mastering a new skill can be tough, but with enough persistence and motivation there is a lot we can achieve. Like learning how to code, it can be hard, frustrating and time-consuming. In the end, the most important thing to do is to keep going and gain experience.",
                "fullContent": "<p name=\\"b923\\" id=\\"b923\\" class=\\"graf graf--p graf-after--p\\">Side projects come in many forms and have lots of different purposes. Some people start them to create a nice product and eventually build a successful company, but there are many other reasons why working on side projects can be exceptionally important.</p><h3 name=\\"6bfc\\" id=\\"6bfc\\" class=\\"graf graf--h3 graf-after--p\\">Accelerate your learning.</h3><p name=\\"c1e6\\" id=\\"c1e6\\" class=\\"graf graf--p graf-after--h3\\">Learning and mastering a new skill can be tough, but with enough persistence and motivation there is a lot we can achieve. Like learning how to code, it can be hard, frustrating and time-consuming. <span class=\\"markup--quote markup--p-quote is-other\\" name=\\"anon_3afddf1c3fc5\\" data-creator-ids=\\"anon\\">In the end, the most important thing to do is to keep going and gain experience.</span></p><p name=\\"f873\\" id=\\"f873\\" class=\\"graf graf--p graf-after--p\\">Sure, it helps if you’re good at math, logical thinking and have a college degree in computer science. But for people with a non-technical background, like me, it’s still possible to become great developers with enough motivation and persistence.</p><p name=\\"4659\\" id=\\"4659\\" class=\\"graf graf--p graf-after--p\\">In my own experience, I found working on side projects in my spare time not only fun, but really helpful in developing my coding skills.</p>",
                "id": 3,
                "slug": "why-side-projects-are-so-damn-important",
                "title": "Why side projects are so damn important",
              },
              Object {
                "authorId": 3,
                "content": "CSS Grid (Grid) has been out for some time now, with full support in major modern browsers. I’ll leave others to dive into why it’s so great and what new design possibilities it makes so easy to explore. If you have been looking for the best way to support responsive web designs, I’ve yet to see anyone that doesn’t love Grid. It’s simple to use, yet extremely powerful and flexible.",
                "fullContent": "<p name=\\"da5e\\" id=\\"da5e\\" class=\\"graf graf--p graf-after--h3\\">I’ve experimented a lot with grid without thinking about progressive enhancement. I was making Codepen’s for no other purpose other than learning the spec. Almost all of them break into an embarrassing mess in non-supportive browsers.</p><p name=\\"8632\\" id=\\"8632\\" class=\\"graf graf--p graf-after--figure\\">Grid looks set to be unleashed on all browsers at the beginning of next year. As the prospect of building an actual commercial site for a client approaches, I’ve started to think about how to deal with older browsers. I started reading Aaron Gustafson’s book <em class=\\"markup--em markup--p-em\\">Adaptive Web Design: Crafting Rich Experiences with Progressive Enhancement</em>. While not mentioning CSS grid, it certainly re-emphasized the importance of the concept in my mind.</p><pre name=\\"541f\\" id=\\"541f\\" class=\\"graf graf--pre graf-after--p\\"><a href=\\"http://twitter.com/supports\\" data-href=\\"http://twitter.com/supports\\" class=\\"markup--anchor markup--pre-anchor\\" title=\\"Twitter profile for @supports\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">@supports</a> not(display: grid) {<br> .item {<br> height: 100px;<br> width: 100px;<br> margin: 20px;<br> }<br> .grid {<br> display: flex;<br> flex-wrap: wrap;<br> }<br>}</pre><p name=\\"7b9a\\" id=\\"7b9a\\" class=\\"graf graf--p graf-after--pre\\">What if you want to support browsers that don’t even support @supports? Simply use the cascading nature of CSS. If it’s old enough to have not implemented @supports it is unlikely to support flexbox, but we could give a basic float layout at the top of our stylesheet, and then overwrite it further down with</p><pre name=\\"e81d\\" id=\\"e81d\\" class=\\"graf graf--pre graf-after--p\\"><a href=\\"http://twitter.com/supports\\" data-href=\\"http://twitter.com/supports\\" class=\\"markup--anchor markup--pre-anchor\\" title=\\"Twitter profile for @supports\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">@supports</a> (display: grid) { <br>styles to overwrite float layout <br>}</pre>",
                "id": 4,
                "slug": "progressive-enhancement-with-css-grid",
                "title": "Progressive enhancement with CSS Grid",
              },
              Object {
                "authorId": 2,
                "content": "Many people get confused by the difference between components, their instances, and elements in React. Why are there three different terms to refer to something that is painted on screen?
If you’re new to React, you probably only worked with component classes and instances before. For example, you may declare a Button component by creating a class. When the program is running, you may have several instances of this component on screen, each with its own properties and local state. This is the traditional object oriented UI programming. Why introduce elements?",
                "fullContent": "<p name=\\"e47d\\" id=\\"e47d\\" class=\\"graf graf--p graf-after--h3\\">Many people get confused by <strong class=\\"markup--strong markup--p-strong\\">the difference between components, their instances, and elements in React</strong>. Why are there three different terms to refer to something that is painted on screen?</p><p name=\\"468b\\" id=\\"468b\\" class=\\"graf graf--p graf-after--p\\">If you’re new to React, you probably only worked with component classes and instances before. For example, you may declare a Button<em class=\\"markup--em markup--p-em\\"> component </em>by creating a class. When the program is running, you may have several <em class=\\"markup--em markup--p-em\\">instances </em>of this component on screen, each with its own properties and local state. This is the traditional object oriented UI programming. Why introduce <em class=\\"markup--em markup--p-em\\">elements</em>?</p><p name=\\"45f7\\" id=\\"45f7\\" class=\\"graf graf--p graf-after--p\\">In this traditional UI model, it is up to you take care of creating and destroying child component instances. If a <em class=\\"markup--em markup--p-em\\">Form</em> component wants to render a <em class=\\"markup--em markup--p-em\\">Button</em> component, it needs to create its instance, and manually keep it up to date with any new information.</p><p name=\\"c367\\" id=\\"c367\\" class=\\"graf graf--p graf-after--pre\\">This is pseudocode, but this is more or less what you end up with when you try to write composable UI that behaves consistently in an object oriented way with a framework like Backbone.</p><p name=\\"de5a\\" id=\\"de5a\\" class=\\"graf graf--p graf-after--p\\">Each component has to keep references to its DOM node and to the instances of the children components, and create, update, and destroy them when the time is right. The lines of code grow as the square of the number of possible states of the component, and the parents have direct access to their children component instances, making it hard to decouple them in the future.</p>",
                "id": 5,
                "slug": "react-components-elements-and-instances",
                "title": "React Components, Elements, and Instances",
              },
              Object {
                "authorId": 2,
                "content": "There has been no shortage of great Flux implementations, such as Flummox, Alt, or Fluxible. Most of them are focused on making Flux easier to use with the server rendering and reducing the boilerplate. They also often provide convenience utilities like higher-order components and asynchronous action helpers. Still, under the hood, many of them are built on top of the original Flux Dispatcher.",
                "fullContent": "<p name=\\"f9ff\\" id=\\"f9ff\\" class=\\"graf graf--p graf-after--figure\\">There has been no shortage of great Flux implementations, such as <a href=\\"https://github.com/acdlite/flummox\\" data-href=\\"https://github.com/acdlite/flummox\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flummox</a>, <a href=\\"https://github.com/goatslacker/alt\\" data-href=\\"https://github.com/goatslacker/alt\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Alt</a>, or <a href=\\"http://fluxible.io/\\" data-href=\\"http://fluxible.io/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Fluxible</a>. Most of them are focused on making Flux easier to use with the server rendering and reducing the boilerplate. They also often provide convenience utilities like <a href=\\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\\" data-href=\\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\">higher-order components</a> and asynchronous action helpers. Still, under the hood, many of them are built on top of the original <a href=\\"https://facebook.github.io/flux/docs/dispatcher.html\\" data-href=\\"https://facebook.github.io/flux/docs/dispatcher.html\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flux Dispatcher</a>.</p><p name=\\"25d1\\" id=\\"25d1\\" class=\\"graf graf--p graf-after--p\\">Say, if the actions aren’t plain objects flowing through a central dispatcher, it is much harder to <a href=\\"https://medium.com/@nextminds/replaying-bugs-with-flux-52f6bd8c8307\\" data-href=\\"https://medium.com/@nextminds/replaying-bugs-with-flux-52f6bd8c8307\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\">record and replay actions</a> for debugging. If the action type constants are not explicitly specified, and instead are generated from the method names, they might be more difficult to use together with the static analysis tools like <a href=\\"http://flowtype.org/\\" data-href=\\"http://flowtype.org/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flow</a>. That there is no single Flux library is a good thing, as the acceptable tradeoffs may vary for every team.</p><p name=\\"fb25\\" id=\\"fb25\\" class=\\"graf graf--p graf-after--p\\">Sure, figuring out how to make the isomorphic Flux easy was a step forward, but after that, the changes I have seen were either too cosmetic, or too drastic to call it Flux. <strong class=\\"markup--strong markup--p-strong\\">The unidirectional data flow is important, but so is the relative ease of use of Flux, even for people who are not very keen on the functional programming yet.</strong> I think that if something requires you to understand cursors or observables, it might be great, but it’s not Flux. (I <em class=\\"markup--em markup--p-em\\">do</em> like observables. But that’s not my point.)</p><p name=\\"8953\\" id=\\"8953\\" class=\\"graf graf--p graf-after--p\\">So is Flux evolving? For the first time in many months, I think that the answer is <em class=\\"markup--em markup--p-em\\">yes</em>. There are two API changes that I have noticed consistently in many new Flux implementations. These changes complement each other, and while they seem cosmetic, they also open up some exciting possibilities that weren’t available before. And they don’t even introduce any new concepts, such as cursors or observables!</p>",
                "id": 6,
                "slug": "the-evolution-of-flux-frameworks",
                "title": "The Evolution of Flux Frameworks",
              },
              Object {
                "authorId": 1,
                "content": "Ever wondered what it would be like to create a Chrome extension? Well, I’m here to tell you just how easy it is. Follow these steps and your idea will turn into reality and you’ll be able to publish a real extension in the Chrome Web Store in no time.",
                "fullContent": "<p name=\\"8574\\" id=\\"8574\\" class=\\"graf graf--p graf-after--figure\\">Ever wondered what it would be like to create a Chrome extension? Well, I’m here to tell you just how easy it is. Follow these steps and your idea will turn into reality and you’ll be able to publish a real extension in the <a href=\\"https://chrome.google.com/webstore/category/extensions\\" data-href=\\"https://chrome.google.com/webstore/category/extensions\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">Chrome Web Store</a> in no time.</p><h3 name=\\"9f91\\" id=\\"9f91\\" class=\\"graf graf--h3 graf-after--p\\">What is a Chrome extension?</h3><p name=\\"9205\\" id=\\"9205\\" class=\\"graf graf--p graf-after--h3\\"><span class=\\"markup--quote markup--p-quote is-other\\" name=\\"anon_c5c420b1e1a3\\" data-creator-ids=\\"anon\\">Chrome extensions allow you to add functionality to the Chrome web browser without diving deeply into native code.</span> That’s awesome because you can create new extensions for Chrome with core technologies that web developers are very familiar with - HTML, CSS, and JavaScript. If you’ve ever built a web page, you’ll will be able to create an extension faster than you can have lunch. The only thing you need to learn is how to add some functionality to Chrome through some of the JavaScript APIs that Chrome exposes.</p><p name=\\"d467\\" id=\\"d467\\" class=\\"graf graf--p graf-after--p\\">If you’re not experienced yet in building web pages, I recommend you first dive into some free resources to learn how to code, like <a href=\\"https://www.freecodecamp.org/\\" data-href=\\"https://www.freecodecamp.org/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">freeCodeCamp</a>.</p>",
                "id": 7,
                "slug": "how-to-create-and-publish-a-chrome-extension-in-20-minutes",
                "title": "How to Create and Publish a Chrome Extension in 20 minutes",
              },
              Object {
                "authorId": 2,
                "content": "People often choose Redux before they need it. “What if our app doesn’t scale without it?” Later, developers frown at the indirection Redux introduced to their code. “Why do I have to touch three files to get a simple feature working?” Why indeed!",
                "fullContent": "<p name=\\"7e78\\" id=\\"7e78\\" class=\\"graf graf--p graf-after--h3\\">People often choose Redux before they need it. “What if our app doesn’t scale without it?” Later, developers frown at the indirection Redux introduced to their code. “Why do I have to touch three files to get a simple feature working?” Why indeed!</p><ul class=\\"postList\\"><li name=\\"998d\\" id=\\"998d\\" class=\\"graf graf--li graf-after--p\\">Describe application state as plain objects and arrays.</li><li name=\\"46e5\\" id=\\"46e5\\" class=\\"graf graf--li graf-after--li\\">Describe changes in the system as plain objects.</li><li name=\\"3bca\\" id=\\"3bca\\" class=\\"graf graf--li graf-after--li\\">Describe the logic for handling changes as pure functions.</li></ul><p name=\\"5094\\" id=\\"5094\\" class=\\"graf graf--p graf-after--li\\">None of these limitations are required to build an app, with or without React. In fact these are pretty strong constraints, and you should think carefully before adopting them even in parts of your app.</p><p name=\\"448f\\" id=\\"448f\\" class=\\"graf graf--p graf-after--p\\">Do you have good reasons for doing so?</p><p name=\\"3650\\" id=\\"3650\\" class=\\"graf graf--p graf-after--p\\">These limitations are appealing to me because they help build apps that:</p>",
                "id": 8,
                "slug": "you-might-not-need-redux",
                "title": "You Might Not Need Redux",
              },
              Object {
                "authorId": 3,
                "content": "In cryptography a ‘key’ is a piece of information used in combination with an algorithm (a ‘cipher’) to transform plaintext into ciphertext (encryption) and vice versa (decryption).
A cipher can be ‘reciprocal’ if it is used for both encryption and decryption, or ‘non-reciprocal’ if a transformation to the key is required when using it in reverse.",
                "fullContent": "<h3 name=\\"5aad\\" id=\\"5aad\\" class=\\"graf graf--h3 graf--leading\\">🔑 What is a&nbsp;‘key’?</h3><p name=\\"bf3b\\" id=\\"bf3b\\" class=\\"graf graf--p graf-after--h3\\">In cryptography a ‘key’ is a piece of information used in combination with an algorithm (a ‘cipher’) to transform plaintext into ciphertext (encryption) and vice versa (decryption).</p><p name=\\"efb7\\" id=\\"efb7\\" class=\\"graf graf--p graf-after--p\\">A cipher can be ‘reciprocal’ if it is used for both encryption and decryption, or ‘non-reciprocal’ if a transformation to the key is required when using it in reverse.</p><h4 name=\\"2c0b\\" id=\\"2c0b\\" class=\\"graf graf--h4 graf-after--p\\">Non-reciprocal cipher</h4><p name=\\"3ee3\\" id=\\"3ee3\\" class=\\"graf graf--p graf-after--h4\\">A simple Caesar cipher transforms each letter of a plaintext message by shifting it a set number of places in a set direction along the basic 26 character Latin alphabet. The encryption and decryption here is not reciprocal, the key must be transformed (-3 to +3) to alter the direction of the shift when moving between encryption and decryption.</p><h4 name=\\"a26d\\" id=\\"a26d\\" class=\\"graf graf--h4 graf-after--figure\\">Reciprocal cipher</h4><p name=\\"5010\\" id=\\"5010\\" class=\\"graf graf--p graf-after--h4\\">ROT13 (rotate 13) is a specific implementation of the Caesar cipher where the shift is 13 places. Due to the basic Latin alphabet being 26 characters long this means that the direction of the shift does not matter, the result is the same in either direction. They key (13) can be used without transformation.</p>",
                "id": 9,
                "slug": "what-are-encryption-keys-and-how-do-they-work",
                "title": "What are encryption keys and how do they work?",
              },
              Object {
                "authorId": 1,
                "content": "In her talk, Tracy showed why reactive programming can be a more efficient way to code. She also discussed how it has been adopted by industry leaders such as Netflix, Slack, Microsoft, and Facebook as the new standard for developing applications. It seems very promising, especially libraries like RxJS, that help developers deliver complex features quicker with less, more maintainable code.",
                "fullContent": "<p name=\\"a432\\" id=\\"a432\\" class=\\"graf graf--p graf-after--p\\">Let me tell you five things I learned on a day filled with great talks, lots of coffee, and of course some beers.</p><h4 name=\\"a588\\" id=\\"a588\\" class=\\"graf graf--h4 graf-after--p\\">1. Reactive programming</h4><p name=\\"4779\\" id=\\"4779\\" class=\\"graf graf--p graf-after--h4\\">There will always be a new JavaScript framework to learn. Technology will continue to evolve and change, and developers will continue to rewrite applications. <a href=\\"https://twitter.com/ladyleet\\" data-href=\\"https://twitter.com/ladyleet\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">Tracy Lee</a> talked about reactive programming, which can enable you to just copy-paste most of your code from framework to framework.</p><p name=\\"b7f8\\" id=\\"b7f8\\" class=\\"graf graf--p graf-after--p\\">In her talk, Tracy showed why reactive programming can be a more efficient way to code. She also discussed how it has been adopted by industry leaders such as Netflix, Slack, Microsoft, and Facebook as the new standard for developing applications. It seems very promising, especially libraries like RxJS, that help developers deliver complex features quicker with less, more maintainable code.</p><p name=\\"994f\\" id=\\"994f\\" class=\\"graf graf--p graf-after--p\\">The more developers adopt this concept, the better.</p><p name=\\"c042\\" id=\\"c042\\" class=\\"graf graf--p graf-after--p\\">As Tracy mentioned in her blog post:</p><blockquote name=\\"57cc\\" id=\\"57cc\\" class=\\"graf graf--pullquote graf--startsWithDoubleQuote graf-after--p\\"><span class=\\"markup--quote markup--pullquote-quote is-other\\" name=\\"anon_1fccf870bc20\\" data-creator-ids=\\"anon\\">“The more people understand reactive programming, the more productive we as one modern web will all be. The only barrier to adoption is not understanding the paradigm and the language around&nbsp;it.”</span></blockquote>",
                "id": 10,
                "slug": "here-s-what-i-learned-at-the-world-s-biggest-react-conference",
                "title": "Here’s what I learned at the world’s biggest React conference",
              },
            ]
          }
        />,
        "history": Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "posts": Array [
            Object {
              "authorId": 3,
              "content": "In order for a unit test to be worthwhile it must be reliable; it should not be reliant on hopeful consistency of external dependencies in order to pass. External dependencies can include any modules/packages external to the test subject, requests to a database, or requests to an API. If running the same test several times without change can result in different outcomes, the test loses value. If trust in the test is lost, less focus is inevitably paid to test failures.",
              "fullContent": "<p name=\\"444d\\" id=\\"444d\\" class=\\"graf graf--p graf-after--figure\\"><a href=\\"https://medium.com/codeclan/testing-react-with-jest-and-enzyme-20505fec4675\\" data-href=\\"https://medium.com/codeclan/testing-react-with-jest-and-enzyme-20505fec4675\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\"><em class=\\"markup--em markup--p-em\\">Previously</em></a><em class=\\"markup--em markup--p-em\\"> we introduced the basics of using </em><a href=\\"https://jestjs.io/docs/en/getting-started\\" data-href=\\"https://jestjs.io/docs/en/getting-started\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener nofollow\\" target=\\"_blank\\"><em class=\\"markup--em markup--p-em\\">Jest</em></a><em class=\\"markup--em markup--p-em\\"> as a test runner, assertion library, and mocking library. If you have not used Jest before I recommend reading through the linked post first.</em></p><p name=\\"066f\\" id=\\"066f\\" class=\\"graf graf--p graf-after--p\\">In order for a unit test to be worthwhile it must be reliable; it should not be reliant on hopeful consistency of external dependencies in order to pass. External dependencies can include any <a href=\\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\\" data-href=\\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">modules/packages</a> external to the test subject, requests to a database, or requests to an API. If running the same test several times without change can result in different outcomes, the test loses value. If trust in the test is lost, less focus is inevitably paid to test failures.</p><p name=\\"2e8f\\" id=\\"2e8f\\" class=\\"graf graf--p graf-after--p\\">Unit tests aim to test small units of code in isolation, testing how each behaves with specific input. The responsibility of testing how different parts of a system work together lies with integration tests.</p>",
              "id": 1,
              "slug": "mocking-es-and-commonjs-modules-with-jest-mock",
              "title": "Mocking ES and CommonJS modules with jest.mock()",
            },
            Object {
              "authorId": 2,
              "content": "We know that components and top-down data flow help us organize a large UI into small, independent, reusable pieces. However, we often can’t break complex components down any further because the logic is stateful and can’t be extracted to a function or another component. Sometimes that’s what people mean when they say React doesn’t let them “separate concerns.”",
              "fullContent": "<p name=\\"7b7c\\" id=\\"7b7c\\" class=\\"graf graf--p graf-after--figure\\">I strongly recommend to watch this opening keynote to see the problems we’re trying to solve with the Hooks proposal. However, even an hour is a big time investment, so I decided to share a few thoughts on Hooks below.</p><h3 name=\\"5655\\" id=\\"5655\\" class=\\"graf graf--h3 graf-after--blockquote\\">Why Hooks?</h3><p name=\\"28ba\\" id=\\"28ba\\" class=\\"graf graf--p graf-after--h3\\">We know that components and top-down data flow help us organize a large UI into small, independent, reusable pieces. <strong class=\\"markup--strong markup--p-strong\\">However, we often can’t break complex components down any further because the logic is stateful and can’t be extracted to a function or another component.</strong> Sometimes that’s what people mean when they say React doesn’t let them “separate concerns.”</p><p name=\\"036d\\" id=\\"036d\\" class=\\"graf graf--p graf-after--p\\">These cases are very common and include animations, form handling, connecting to external data sources, and many other things we want to do from our components. When we try to solve these use cases with components alone, we usually end up with:</p>",
              "id": 2,
              "slug": "making-sense-of-react-hooks",
              "title": "Making Sense of React Hooks",
            },
            Object {
              "authorId": 1,
              "content": "Learning and mastering a new skill can be tough, but with enough persistence and motivation there is a lot we can achieve. Like learning how to code, it can be hard, frustrating and time-consuming. In the end, the most important thing to do is to keep going and gain experience.",
              "fullContent": "<p name=\\"b923\\" id=\\"b923\\" class=\\"graf graf--p graf-after--p\\">Side projects come in many forms and have lots of different purposes. Some people start them to create a nice product and eventually build a successful company, but there are many other reasons why working on side projects can be exceptionally important.</p><h3 name=\\"6bfc\\" id=\\"6bfc\\" class=\\"graf graf--h3 graf-after--p\\">Accelerate your learning.</h3><p name=\\"c1e6\\" id=\\"c1e6\\" class=\\"graf graf--p graf-after--h3\\">Learning and mastering a new skill can be tough, but with enough persistence and motivation there is a lot we can achieve. Like learning how to code, it can be hard, frustrating and time-consuming. <span class=\\"markup--quote markup--p-quote is-other\\" name=\\"anon_3afddf1c3fc5\\" data-creator-ids=\\"anon\\">In the end, the most important thing to do is to keep going and gain experience.</span></p><p name=\\"f873\\" id=\\"f873\\" class=\\"graf graf--p graf-after--p\\">Sure, it helps if you’re good at math, logical thinking and have a college degree in computer science. But for people with a non-technical background, like me, it’s still possible to become great developers with enough motivation and persistence.</p><p name=\\"4659\\" id=\\"4659\\" class=\\"graf graf--p graf-after--p\\">In my own experience, I found working on side projects in my spare time not only fun, but really helpful in developing my coding skills.</p>",
              "id": 3,
              "slug": "why-side-projects-are-so-damn-important",
              "title": "Why side projects are so damn important",
            },
            Object {
              "authorId": 3,
              "content": "CSS Grid (Grid) has been out for some time now, with full support in major modern browsers. I’ll leave others to dive into why it’s so great and what new design possibilities it makes so easy to explore. If you have been looking for the best way to support responsive web designs, I’ve yet to see anyone that doesn’t love Grid. It’s simple to use, yet extremely powerful and flexible.",
              "fullContent": "<p name=\\"da5e\\" id=\\"da5e\\" class=\\"graf graf--p graf-after--h3\\">I’ve experimented a lot with grid without thinking about progressive enhancement. I was making Codepen’s for no other purpose other than learning the spec. Almost all of them break into an embarrassing mess in non-supportive browsers.</p><p name=\\"8632\\" id=\\"8632\\" class=\\"graf graf--p graf-after--figure\\">Grid looks set to be unleashed on all browsers at the beginning of next year. As the prospect of building an actual commercial site for a client approaches, I’ve started to think about how to deal with older browsers. I started reading Aaron Gustafson’s book <em class=\\"markup--em markup--p-em\\">Adaptive Web Design: Crafting Rich Experiences with Progressive Enhancement</em>. While not mentioning CSS grid, it certainly re-emphasized the importance of the concept in my mind.</p><pre name=\\"541f\\" id=\\"541f\\" class=\\"graf graf--pre graf-after--p\\"><a href=\\"http://twitter.com/supports\\" data-href=\\"http://twitter.com/supports\\" class=\\"markup--anchor markup--pre-anchor\\" title=\\"Twitter profile for @supports\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">@supports</a> not(display: grid) {<br> .item {<br> height: 100px;<br> width: 100px;<br> margin: 20px;<br> }<br> .grid {<br> display: flex;<br> flex-wrap: wrap;<br> }<br>}</pre><p name=\\"7b9a\\" id=\\"7b9a\\" class=\\"graf graf--p graf-after--pre\\">What if you want to support browsers that don’t even support @supports? Simply use the cascading nature of CSS. If it’s old enough to have not implemented @supports it is unlikely to support flexbox, but we could give a basic float layout at the top of our stylesheet, and then overwrite it further down with</p><pre name=\\"e81d\\" id=\\"e81d\\" class=\\"graf graf--pre graf-after--p\\"><a href=\\"http://twitter.com/supports\\" data-href=\\"http://twitter.com/supports\\" class=\\"markup--anchor markup--pre-anchor\\" title=\\"Twitter profile for @supports\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">@supports</a> (display: grid) { <br>styles to overwrite float layout <br>}</pre>",
              "id": 4,
              "slug": "progressive-enhancement-with-css-grid",
              "title": "Progressive enhancement with CSS Grid",
            },
            Object {
              "authorId": 2,
              "content": "Many people get confused by the difference between components, their instances, and elements in React. Why are there three different terms to refer to something that is painted on screen?
If you’re new to React, you probably only worked with component classes and instances before. For example, you may declare a Button component by creating a class. When the program is running, you may have several instances of this component on screen, each with its own properties and local state. This is the traditional object oriented UI programming. Why introduce elements?",
              "fullContent": "<p name=\\"e47d\\" id=\\"e47d\\" class=\\"graf graf--p graf-after--h3\\">Many people get confused by <strong class=\\"markup--strong markup--p-strong\\">the difference between components, their instances, and elements in React</strong>. Why are there three different terms to refer to something that is painted on screen?</p><p name=\\"468b\\" id=\\"468b\\" class=\\"graf graf--p graf-after--p\\">If you’re new to React, you probably only worked with component classes and instances before. For example, you may declare a Button<em class=\\"markup--em markup--p-em\\"> component </em>by creating a class. When the program is running, you may have several <em class=\\"markup--em markup--p-em\\">instances </em>of this component on screen, each with its own properties and local state. This is the traditional object oriented UI programming. Why introduce <em class=\\"markup--em markup--p-em\\">elements</em>?</p><p name=\\"45f7\\" id=\\"45f7\\" class=\\"graf graf--p graf-after--p\\">In this traditional UI model, it is up to you take care of creating and destroying child component instances. If a <em class=\\"markup--em markup--p-em\\">Form</em> component wants to render a <em class=\\"markup--em markup--p-em\\">Button</em> component, it needs to create its instance, and manually keep it up to date with any new information.</p><p name=\\"c367\\" id=\\"c367\\" class=\\"graf graf--p graf-after--pre\\">This is pseudocode, but this is more or less what you end up with when you try to write composable UI that behaves consistently in an object oriented way with a framework like Backbone.</p><p name=\\"de5a\\" id=\\"de5a\\" class=\\"graf graf--p graf-after--p\\">Each component has to keep references to its DOM node and to the instances of the children components, and create, update, and destroy them when the time is right. The lines of code grow as the square of the number of possible states of the component, and the parents have direct access to their children component instances, making it hard to decouple them in the future.</p>",
              "id": 5,
              "slug": "react-components-elements-and-instances",
              "title": "React Components, Elements, and Instances",
            },
            Object {
              "authorId": 2,
              "content": "There has been no shortage of great Flux implementations, such as Flummox, Alt, or Fluxible. Most of them are focused on making Flux easier to use with the server rendering and reducing the boilerplate. They also often provide convenience utilities like higher-order components and asynchronous action helpers. Still, under the hood, many of them are built on top of the original Flux Dispatcher.",
              "fullContent": "<p name=\\"f9ff\\" id=\\"f9ff\\" class=\\"graf graf--p graf-after--figure\\">There has been no shortage of great Flux implementations, such as <a href=\\"https://github.com/acdlite/flummox\\" data-href=\\"https://github.com/acdlite/flummox\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flummox</a>, <a href=\\"https://github.com/goatslacker/alt\\" data-href=\\"https://github.com/goatslacker/alt\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Alt</a>, or <a href=\\"http://fluxible.io/\\" data-href=\\"http://fluxible.io/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Fluxible</a>. Most of them are focused on making Flux easier to use with the server rendering and reducing the boilerplate. They also often provide convenience utilities like <a href=\\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\\" data-href=\\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\">higher-order components</a> and asynchronous action helpers. Still, under the hood, many of them are built on top of the original <a href=\\"https://facebook.github.io/flux/docs/dispatcher.html\\" data-href=\\"https://facebook.github.io/flux/docs/dispatcher.html\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flux Dispatcher</a>.</p><p name=\\"25d1\\" id=\\"25d1\\" class=\\"graf graf--p graf-after--p\\">Say, if the actions aren’t plain objects flowing through a central dispatcher, it is much harder to <a href=\\"https://medium.com/@nextminds/replaying-bugs-with-flux-52f6bd8c8307\\" data-href=\\"https://medium.com/@nextminds/replaying-bugs-with-flux-52f6bd8c8307\\" class=\\"markup--anchor markup--p-anchor\\" target=\\"_blank\\">record and replay actions</a> for debugging. If the action type constants are not explicitly specified, and instead are generated from the method names, they might be more difficult to use together with the static analysis tools like <a href=\\"http://flowtype.org/\\" data-href=\\"http://flowtype.org/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">Flow</a>. That there is no single Flux library is a good thing, as the acceptable tradeoffs may vary for every team.</p><p name=\\"fb25\\" id=\\"fb25\\" class=\\"graf graf--p graf-after--p\\">Sure, figuring out how to make the isomorphic Flux easy was a step forward, but after that, the changes I have seen were either too cosmetic, or too drastic to call it Flux. <strong class=\\"markup--strong markup--p-strong\\">The unidirectional data flow is important, but so is the relative ease of use of Flux, even for people who are not very keen on the functional programming yet.</strong> I think that if something requires you to understand cursors or observables, it might be great, but it’s not Flux. (I <em class=\\"markup--em markup--p-em\\">do</em> like observables. But that’s not my point.)</p><p name=\\"8953\\" id=\\"8953\\" class=\\"graf graf--p graf-after--p\\">So is Flux evolving? For the first time in many months, I think that the answer is <em class=\\"markup--em markup--p-em\\">yes</em>. There are two API changes that I have noticed consistently in many new Flux implementations. These changes complement each other, and while they seem cosmetic, they also open up some exciting possibilities that weren’t available before. And they don’t even introduce any new concepts, such as cursors or observables!</p>",
              "id": 6,
              "slug": "the-evolution-of-flux-frameworks",
              "title": "The Evolution of Flux Frameworks",
            },
            Object {
              "authorId": 1,
              "content": "Ever wondered what it would be like to create a Chrome extension? Well, I’m here to tell you just how easy it is. Follow these steps and your idea will turn into reality and you’ll be able to publish a real extension in the Chrome Web Store in no time.",
              "fullContent": "<p name=\\"8574\\" id=\\"8574\\" class=\\"graf graf--p graf-after--figure\\">Ever wondered what it would be like to create a Chrome extension? Well, I’m here to tell you just how easy it is. Follow these steps and your idea will turn into reality and you’ll be able to publish a real extension in the <a href=\\"https://chrome.google.com/webstore/category/extensions\\" data-href=\\"https://chrome.google.com/webstore/category/extensions\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">Chrome Web Store</a> in no time.</p><h3 name=\\"9f91\\" id=\\"9f91\\" class=\\"graf graf--h3 graf-after--p\\">What is a Chrome extension?</h3><p name=\\"9205\\" id=\\"9205\\" class=\\"graf graf--p graf-after--h3\\"><span class=\\"markup--quote markup--p-quote is-other\\" name=\\"anon_c5c420b1e1a3\\" data-creator-ids=\\"anon\\">Chrome extensions allow you to add functionality to the Chrome web browser without diving deeply into native code.</span> That’s awesome because you can create new extensions for Chrome with core technologies that web developers are very familiar with - HTML, CSS, and JavaScript. If you’ve ever built a web page, you’ll will be able to create an extension faster than you can have lunch. The only thing you need to learn is how to add some functionality to Chrome through some of the JavaScript APIs that Chrome exposes.</p><p name=\\"d467\\" id=\\"d467\\" class=\\"graf graf--p graf-after--p\\">If you’re not experienced yet in building web pages, I recommend you first dive into some free resources to learn how to code, like <a href=\\"https://www.freecodecamp.org/\\" data-href=\\"https://www.freecodecamp.org/\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">freeCodeCamp</a>.</p>",
              "id": 7,
              "slug": "how-to-create-and-publish-a-chrome-extension-in-20-minutes",
              "title": "How to Create and Publish a Chrome Extension in 20 minutes",
            },
            Object {
              "authorId": 2,
              "content": "People often choose Redux before they need it. “What if our app doesn’t scale without it?” Later, developers frown at the indirection Redux introduced to their code. “Why do I have to touch three files to get a simple feature working?” Why indeed!",
              "fullContent": "<p name=\\"7e78\\" id=\\"7e78\\" class=\\"graf graf--p graf-after--h3\\">People often choose Redux before they need it. “What if our app doesn’t scale without it?” Later, developers frown at the indirection Redux introduced to their code. “Why do I have to touch three files to get a simple feature working?” Why indeed!</p><ul class=\\"postList\\"><li name=\\"998d\\" id=\\"998d\\" class=\\"graf graf--li graf-after--p\\">Describe application state as plain objects and arrays.</li><li name=\\"46e5\\" id=\\"46e5\\" class=\\"graf graf--li graf-after--li\\">Describe changes in the system as plain objects.</li><li name=\\"3bca\\" id=\\"3bca\\" class=\\"graf graf--li graf-after--li\\">Describe the logic for handling changes as pure functions.</li></ul><p name=\\"5094\\" id=\\"5094\\" class=\\"graf graf--p graf-after--li\\">None of these limitations are required to build an app, with or without React. In fact these are pretty strong constraints, and you should think carefully before adopting them even in parts of your app.</p><p name=\\"448f\\" id=\\"448f\\" class=\\"graf graf--p graf-after--p\\">Do you have good reasons for doing so?</p><p name=\\"3650\\" id=\\"3650\\" class=\\"graf graf--p graf-after--p\\">These limitations are appealing to me because they help build apps that:</p>",
              "id": 8,
              "slug": "you-might-not-need-redux",
              "title": "You Might Not Need Redux",
            },
            Object {
              "authorId": 3,
              "content": "In cryptography a ‘key’ is a piece of information used in combination with an algorithm (a ‘cipher’) to transform plaintext into ciphertext (encryption) and vice versa (decryption).
A cipher can be ‘reciprocal’ if it is used for both encryption and decryption, or ‘non-reciprocal’ if a transformation to the key is required when using it in reverse.",
              "fullContent": "<h3 name=\\"5aad\\" id=\\"5aad\\" class=\\"graf graf--h3 graf--leading\\">🔑 What is a&nbsp;‘key’?</h3><p name=\\"bf3b\\" id=\\"bf3b\\" class=\\"graf graf--p graf-after--h3\\">In cryptography a ‘key’ is a piece of information used in combination with an algorithm (a ‘cipher’) to transform plaintext into ciphertext (encryption) and vice versa (decryption).</p><p name=\\"efb7\\" id=\\"efb7\\" class=\\"graf graf--p graf-after--p\\">A cipher can be ‘reciprocal’ if it is used for both encryption and decryption, or ‘non-reciprocal’ if a transformation to the key is required when using it in reverse.</p><h4 name=\\"2c0b\\" id=\\"2c0b\\" class=\\"graf graf--h4 graf-after--p\\">Non-reciprocal cipher</h4><p name=\\"3ee3\\" id=\\"3ee3\\" class=\\"graf graf--p graf-after--h4\\">A simple Caesar cipher transforms each letter of a plaintext message by shifting it a set number of places in a set direction along the basic 26 character Latin alphabet. The encryption and decryption here is not reciprocal, the key must be transformed (-3 to +3) to alter the direction of the shift when moving between encryption and decryption.</p><h4 name=\\"a26d\\" id=\\"a26d\\" class=\\"graf graf--h4 graf-after--figure\\">Reciprocal cipher</h4><p name=\\"5010\\" id=\\"5010\\" class=\\"graf graf--p graf-after--h4\\">ROT13 (rotate 13) is a specific implementation of the Caesar cipher where the shift is 13 places. Due to the basic Latin alphabet being 26 characters long this means that the direction of the shift does not matter, the result is the same in either direction. They key (13) can be used without transformation.</p>",
              "id": 9,
              "slug": "what-are-encryption-keys-and-how-do-they-work",
              "title": "What are encryption keys and how do they work?",
            },
            Object {
              "authorId": 1,
              "content": "In her talk, Tracy showed why reactive programming can be a more efficient way to code. She also discussed how it has been adopted by industry leaders such as Netflix, Slack, Microsoft, and Facebook as the new standard for developing applications. It seems very promising, especially libraries like RxJS, that help developers deliver complex features quicker with less, more maintainable code.",
              "fullContent": "<p name=\\"a432\\" id=\\"a432\\" class=\\"graf graf--p graf-after--p\\">Let me tell you five things I learned on a day filled with great talks, lots of coffee, and of course some beers.</p><h4 name=\\"a588\\" id=\\"a588\\" class=\\"graf graf--h4 graf-after--p\\">1. Reactive programming</h4><p name=\\"4779\\" id=\\"4779\\" class=\\"graf graf--p graf-after--h4\\">There will always be a new JavaScript framework to learn. Technology will continue to evolve and change, and developers will continue to rewrite applications. <a href=\\"https://twitter.com/ladyleet\\" data-href=\\"https://twitter.com/ladyleet\\" class=\\"markup--anchor markup--p-anchor\\" rel=\\"noopener\\" target=\\"_blank\\">Tracy Lee</a> talked about reactive programming, which can enable you to just copy-paste most of your code from framework to framework.</p><p name=\\"b7f8\\" id=\\"b7f8\\" class=\\"graf graf--p graf-after--p\\">In her talk, Tracy showed why reactive programming can be a more efficient way to code. She also discussed how it has been adopted by industry leaders such as Netflix, Slack, Microsoft, and Facebook as the new standard for developing applications. It seems very promising, especially libraries like RxJS, that help developers deliver complex features quicker with less, more maintainable code.</p><p name=\\"994f\\" id=\\"994f\\" class=\\"graf graf--p graf-after--p\\">The more developers adopt this concept, the better.</p><p name=\\"c042\\" id=\\"c042\\" class=\\"graf graf--p graf-after--p\\">As Tracy mentioned in her blog post:</p><blockquote name=\\"57cc\\" id=\\"57cc\\" class=\\"graf graf--pullquote graf--startsWithDoubleQuote graf-after--p\\"><span class=\\"markup--quote markup--pullquote-quote is-other\\" name=\\"anon_1fccf870bc20\\" data-creator-ids=\\"anon\\">“The more people understand reactive programming, the more productive we as one modern web will all be. The only barrier to adoption is not understanding the paradigm and the language around&nbsp;it.”</span></blockquote>",
              "id": 10,
              "slug": "here-s-what-i-learned-at-the-world-s-biggest-react-conference",
              "title": "Here’s what I learned at the world’s biggest React conference",
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
